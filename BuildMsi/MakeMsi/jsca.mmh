;----------------------------------------------------------------------------
;
;    MODULE NAME:   JSCA.MMH
;
;        $Author:   USER "Dennis"  $
;      $Revision:   1.11  $
;          $Date:   30 May 2009 15:42:36  $
;       $Logfile:   C:/DBAREIS/Projects.PVCS/Win32/MakeMsi/jsca.mmh.pvcs  $
;      COPYRIGHT:   (C)opyright Dennis Bareis, Australia, 2003
;                   All rights reserved.
;
;    DESCRIPTION:   Do not include this header directly, use 'MAKEMSI.MMH'
;                   instead.
;----------------------------------------------------------------------------
#NextId
#NextId LOCK "JSCA.MMH"


;---[4DocoJsCaRelatedOptions]---
;----------------------------------------------------------------------------
;--- General Options --------------------------------------------------------
;----------------------------------------------------------------------------
#define? DEFAULT_JSCA_CAD_DELIMITER           ,_,              ;;Must be 1-9 characters long
#define? JSCA_LOGDIR_ENVVAR                   MAKEMSI_LOGDIR
#define? JSCA_LOG_OK_ENVVAR                   MAKEMSI_LOG      ;;Set this environment variable to N to disable logging
#define? JSCA_LOGDIR_EXP_4_DEFAULT            "C:\\"           ;;By default place in C:\ (can be any JSCRIPT expression)
#define? JSCA_LOGFILE_BASENAME_PREFIX         MAKEMSI_JSCA-
#define? DEFAULT_JSCA_SEQTABLE                InstallExecuteSequence
#define? JSCA_INC_BY_SPACE_COUNT              4
#define? JSCA_ROW_@VALIDATE                   NEW                         ;;See the "@Validate" parameter of the "ROW" command
#define? JSCA_ROW_@VALIDATE_INLINE            NEW -Target:STRINGOVERFLOW  ;;See the "@Validate" parameter of the "ROW" command (lets allow the script to exceed the columns 255 character width)
#define? JSCA_PAUSE                           <$SUNDRY_CA_PAUSE> ;;Debug pauses (Y/N)
#define? JSCA_DISABLED                        <$SUNDRY_DISALLOW_USE_OF_SCRIPT_CUSTOM_ACTIONS> ;;Make non blank to disable (text is error message)
#define? JSCA_DEFAULT_TYPE_ATTRIBUTES
#define? JSCA_DEFAULT_TYPE_ATTRIBUTES_INLINE  immediate           ;;For inline (in CA table) based CA
#define? JSCA_BINARY_DOCO                     Y                   ;;"N" = Don't add to doco
#define? JSCA_BINARY_COMMENT                  This file generated by the "JsCa" command at <??RxMmLocation>

;----------------------------------------------------------------------------
;--- Custom Action conditions -----------------------------------------------
;----------------------------------------------------------------------------
#define? JSCA_CONDITION_INSTALL_ONLY    <$CONDITION_INSTALL_ONLY>
#define? JSCA_CONDITION_UNINSTALL_ONLY  <$CONDITION_UNINSTALL_ONLY>
;---[4DocoJsCaRelatedOptions]---


;--- Clean out any existing JsCRIPTS directory (don't want obsolete files) ---
#ifndef JSCA_DONT_INITIALIZE_JsCRIPTS_DIRECTORY
   ;--- User is allowing directory to be deleted ----------------------------
   #ifdef IsNT
       #DefineRexx ''
           call AddressCmd 'rd "<$MAKEMSI_JSCA_DIR>" /q /s >nul <$Stderr2Out>'
       #DefineRexx
   #end if
#endif



;----------------------------------------------------------------------------
;--- Indicates the start of a JSCRIPT custom action Script ------------------
;----------------------------------------------------------------------------
#RexxVar @@JsCaNesting = 0
#RexxVar @@FunctionCnt  = 0
#RexxVar @@Binary       = ""
#define JSCRIPT_LINE_COMMENT_CHARS   //
#( '<?NewLine>'
   ;--- Define macro to create Js and add it to the binary table -----------
   #define JsCa
   <$UpdateMmLocation>

   ;--- Basic Validation ----------------------------------------------------
   {$!KEYWORDS}                                ;;Don't Expect any keywords!
   #RexxVar @@DisabledMsg = '<$JSCA_DISABLED>'
   #if [@@DisabledMsg <> '']
       ;--- User does not want any scripts created! -------------------------
       #error ^<??@@DisabledMsg>^
   #endif

   ;--- Nesting validation --------------------------------------------------
   #PUSH "JsCa"
   #RexxVar @@JsCaNesting + 1
   #if [@@JsCaNesting <> 1]
       #error ^You can't nest the "JsCa" macro!^
   #endif

   ;--- Initialize the function counter -------------------------------------
   #RexxVar @@FunctionCnt  = 0

   ;--- Initialize the default entry point for testing ----------------------
   #RexxVar @@DefaultTestingFunction = ''

   ;--- Do stuff... ---------------------------------------------------------
   #evaluate ^^ ^<$@@Rexx4JsCa {$?}>^

   ;--- All following stuff goes into the SCRIPT ----------------------------
   #output  "<??@@OutFile>" ASIS

   ;--- Generate start code -------------------------------------------------
   #if  [@@ScriptTypeInline = 'Y']
        ;--- Inline ---------------------------------------------------------
        <?SyntaxCheck>
        <$JSCRIPT_LINE_COMMENT_CHARS><$INLINE_MARKS_START_USER_CODE>
   #elseif
        ;--- Binary ---------------------------------------------------------
        <$JSCA_CA_BINARY_START {$?ResetUsed}{$?}>
   #endif

   ;--- Validate parameters -------------------------------------------------
   {$!:BINARY,LINE1,ERRORRC,LOGFILE,DEFINE,DEL,ERR.NUMBER,FILENAME,PAUSE}
#)
#DefineRexx '@@Rexx4JsCa'
   ;--- Type of CA and name of binary (if actually a binary) ----------------
   @@Binary = "{$Binary}";
   if   left(@@Binary, 1) = '!' then
   do
        ;--- Not a binary but inline JSCRIPT CA TYPE "37" ------------------
        @@ScriptTypeInline = 'Y';
        @@OutFile       = '<$MAKEMSI_JSCA_DIR>\' || @@Binary || '.inline.js';
        @@Binary        = substr(@@Binary, 2);
   end;
   else
   do
        ;--- A normal Binary file added to the binary table -----------------
        @@ScriptTypeInline = 'N';
        @@OutFile = '<$MAKEMSI_JSCA_DIR>\{$FileName=^{$Binary}^}';
        if  translate( right(@@OutFile, 3) ) <> '.JS' then
            @@OutFile = @@OutFile || '.js';
   end;
#DefineRexx


;----------------------------------------------------------------------------
;--- Start FUNCTION Entry point ---------------------------------------------
;----------------------------------------------------------------------------
#( '<?NewLine>'
   ;--- Start user function macro -------------------------------------------
   #define JsCaEntry
   {$!KEYWORDS}  ;;Don't Expect any keywords!

   ;--- Nesting validation --------------------------------------------------
   #push "JS CUSTOM ACTION ENTRY POINT"
   #if [@@JsCaNesting <> 1]
       #error ^This macro can only be used with a "JsCa" block!^
   #endif

   ;--- Remember the name of the function -----------------------------------
   #RexxVar @@FunctionCnt                  + 1
   #RexxVar @@Function.@@FunctionCnt       = '{$#1}'
   #RexxVar @@FunctionOnTrap.@@FunctionCnt = '{$OnTrap=''}'   ;;Code to do some processing on exception!

   ;--- Remember the name of this function ----------------------------------
   #RexxVar @@CurrentCaEntryPoint = '{$#1}'

   ;--- Is this the default (command line testing) entry point? -------------
   #if [@@FunctionCnt = 1]
       ;--- This is by default the default testing function -----------------
       #RexxVar @@DefaultTestingFunction = '{$#1}'
   #endif
   #if ['{$Default='N'}' = 'Y']
       ;--- Yes -------------------------------------------------------------
       #RexxVar @@DefaultTestingFunction = '{$#1}'
   #endif

   ;--- Start the function --------------------------------------------------
   <?NewLine>
   <?NewLine>
   //=====================
   function {$#1}()   //CUSTOM ACTION ENTRY POINT
   //=====================
   {
        var OnTrapRc_<??@@CurrentCaEntryPoint> = {$TrapRc=^1063^}
        try
        {
            CaDebug(0, "{$#1}(): Starting CUSTOM ACTION")
            CaDebugPause("<??@@Function.@@FunctionCnt>() - START")
       <?NewLine>
       <?NewLine>
       //========= START USER CODE ============

   ;--- Check parameter usage -----------------------------------------------
   {$!}
#)




;----------------------------------------------------------------------------
;--- End FUNCTION Entry point -----------------------------------------------
;----------------------------------------------------------------------------
#( '<?NewLine>'
   ;--- End user function macro ---------------------------------------------
   #define /JsCaEntry

   ;--- Nesting validation --------------------------------------------------
   #pop  "JS CUSTOM ACTION ENTRY POINT"

   ;--- Thats the end of the user code, looks like the function succeeded! ---
            <?NewLine>
            <?NewLine>
            //========= END USER CODE ============
            CaDebug(0, "<??@@CurrentCaEntryPoint>(): Ending CUSTOM ACTION, Return code = 0")
            CaDebugPause("<??@@Function.@@FunctionCnt>() - END")
            return(0)
        }
        catch(e)
        {
            ;--- Display ERROR BOX ------------------------------------------
            #(
            CaMsgBox("E",
                          vbCRLF +
                          "=================" + vbCRLF +
                          "JSCRIPT EXCEPTION" + vbCRLF +
                          "=================" + vbCRLF +
                          "CA Entry Point: <??@@CurrentCaEntryPoint>()" + vbCRLF +
                          "Facility Code : " + (e.number >> 16 & 0x1FFF) + vbCRLF +
                          "Error Number  : " + (e.number & 0xFFFF) + vbCRLF +
                          "Description   : " + e.description  + vbCRLF +
                          "AFTER MSG Prog: " + LastUserMsg + vbCRLF +
                          "AFTER MSG Log : " + LastLogOnlyMsg
                    );
            #)

            ;--- Return the error code --------------------------------------
            CaDebug(0, "<??@@CurrentCaEntryPoint>(): Ending CUSTOM ACTION, Return code = " + OnTrapRc_<??@@CurrentCaEntryPoint>)
            return(OnTrapRc_<??@@CurrentCaEntryPoint>)
        }
    }

   ;--- Check parameter usage -----------------------------------------------
   {$!}
#)


;----------------------------------------------------------------------------
;--- End Js ----------------------------------------------------------------
;----------------------------------------------------------------------------
#( '<?NewLine>'
   ;--- Define macro to create Js and add it to the binary table -----------
   #define /JsCa
   {$!KEYWORDS}  ;;Don't Expect any keywords!
   ;<$UpdateMmLocation>            ;;Can't do this as output goes to wrong place!

   ;--- Nesting validation --------------------------------------------------
   #POP "JsCa"
   #RexxVar @@JsCaNesting - 1
   #if [@@JsCaNesting <> 0]
       #error ^This block end macro used before start defined!!^
   #endif

   #if  [@@ScriptTypeInline = 'N']
       ;--- There must be at least one entry point! -------------------------
       #if [@@FunctionCnt < 1]
           #error ^You did not define any function entry points (with "JsCaEntry")!^
       #endif
        <$JSCA_CA_BINARY_END>
   #endif
   #output

   ;--- Do what with the generated file? ------------------------------------
   #if  [@@ScriptTypeInline = 'Y']
        ;--- Just remember the details --------------------------------------
        #RexxVar "INLINE_JS_<??@@Binary>" = "<??@@OutFile>"
   #elseif
       ;--- Add to the binary table -----------------------------------------
       <$Binary KEY="<??@@Binary>" "<??@@OutFile>" Comment="<$JSCA_BINARY_COMMENT>" DOCO="<$JSCA_BINARY_DOCO>">
   #endif
#)



;----------------------------------------------------------------------------
;--- Set up custom actions (schedule etc) -----------------------------------
;----------------------------------------------------------------------------
#(
    #define JsCaSetup
    <$ScriptCaSetup ScriptType="JS" {$?}>
#)

#include "JsCa-StartEnd.MMH"
#NextId UNLOCK "JSCA.MMH"


