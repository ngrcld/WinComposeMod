;----------------------------------------------------------------------------
;
;    MODULE NAME:   VBSCA.MMH
;
;        $Author:   USER "Dennis"  $
;      $Revision:   1.70  $
;          $Date:   11 Aug 2017 11:00:50  $
;       $Logfile:   D:/DBAREIS/Projects.PVCS/Win32/MakeMsi/VbsCa.mmh.pvcs  $
;      COPYRIGHT:   (C)opyright Dennis Bareis, Australia, 2003
;                   All rights reserved.
;
;    DESCRIPTION:   Do not include this header directly, use 'MAKEMSI.MMH'
;                   instead.
;----------------------------------------------------------------------------
#NextId
#NextId LOCK "VBSCA.MMH"


;---[4DocoVbsCaRelatedOptions]---
;----------------------------------------------------------------------------
;--- General Options --------------------------------------------------------
;----------------------------------------------------------------------------
#define? DEFAULT_VBSCA_MUST_DEFINE_VBS_VARIABLES Y
#define? DEFAULT_VBSCA_CAD_DELIMITER             ,_,                 ;;Must be 1-9 characters long (and something your parameters won't contain)
#define? VBSCA_CmdLineTrapsHandledByVb           true                ;;Best way for testing script from command line (given how lame "err" object and its support is)
#define? DEFAULT_VBSCA_SEQTABLE                  InstallExecuteSequence
#define? VBSCA_INC_BY_SPACE_COUNT                4
#define? VBSCA_ROW_@VALIDATE                     NEW                         ;;See the "@Validate" parameter of the "ROW" command
#define? VBSCA_ROW_@VALIDATE_INLINE              NEW -Target:STRINGOVERFLOW  ;;See the "@Validate" parameter of the "ROW" command (lets allow the script to exceed the columns 255 character width)
#define? VBSCA_PAUSE                             <$SUNDRY_CA_PAUSE>          ;;Debug pauses (Y/N)
#define? VBSCA_DISABLED                          <$SUNDRY_DISALLOW_USE_OF_SCRIPT_CUSTOM_ACTIONS>  ;;Make non blank to disable (text is error message)
#define? VBSCA_DEFAULT_TYPE_ATTRIBUTES                                ;;For binary based CA
#define? VBSCA_DEFAULT_TYPE_ATTRIBUTES_INLINE     immediate           ;;For inline (in CA table) based CA
#define? DEFAULT_VBSCA_DOCO                       Y                   ;;"N" = Don't add to doco
#define? VBSCA_BINARY_COMMENT                    This file generated by the "VbsCa" command at <??RxMmLocation>
#define? VBSCA_CADEBUG_FORMAT_LINE12             {{[Time]: }}[1]      ;;Time only visible in log! MUST include "[1]"
#define? VBSCA_CAMSGBOX_PREFIX_ERROR             ERROR: [1]           ;;Windows Installer message template for ERROR messages
#define? VBSCA_CAMSGBOX_PREFIX_INFO                                   ;;Windows Installer message template for INFO messages
#define? VBSCA_CAMSGBOX_PREFIX_OTHER                                  ;;Windows Installer message template for "other" messages
#define? VBSCA_VBEXP_CURRENT_DATE                FormatDateTime(now(), vbShortDate)
#define? VBSCA_VBEXP_CURRENT_TIME                FormatDateTime(now(), vbLongTime)
#define? VBSCA_INLINE_DISABLE_TARGET_VALIDATION  String overflow (greater than length permitted in column); Table: CustomAction, Column: Target
#define? VBSCA_USE_FILEMAKE_TO_CREATE_BINARY_VBS Y                    ;;Use old VBS (and date/time) if only "insignificant" differences


;----------------------------------------------------------------------------
;--- Logging Related --------------------------------------------------------
;----------------------------------------------------------------------------
#define? VBSCA_LOG_TO_FILE.D                     Y                   ;;Logging OK in development
#define? VBSCA_LOG_TO_FILE.P                     N                   ;;Logging may trigger the dodgy Norton Antivirus, if not issue (or you are doing file IO in any case) then turn on!
#define? VBSCA_LOG_TO_FILE                       <$VBSCA_LOG_TO_FILE.[MMMODE]>
#define? VBSCA_LOG_OK_ENVVAR                     MAKEMSI_LOG         ;;Set this environment variable to N to disable logging
#define? VBSCA_LOGDIR_ENVVAR                     MAKEMSI_LOGDIR      ;;Set this environment variable to directory for logging
#define? VBSCA_LOGDIR_EXP_4_DEFAULT              "<??*TEMP>"        ;;By default place in user temp directory (can be any VBS expression)
#define? VBSCA_LOGDIR_EXP_4_DEFAULT               CaGetEnv("TEMP", false)   ;;By default place in user temp directory (can be any VBS expression)
#define? VBSCA_LOGFILE_BASENAME_PREFIX           MAKEMSI_VBSCA-
#define? VBSCA_LOGFILE_BASENAME_MIDDLE           <$ProdInfo.ProductName>(<$ProductVersion>)
#define? VBSCA_LOGFILE_BASENAME_SUFFIX           -" & WeekDayName(Weekday(date())) & "   ;;Can help to reduce likelyhood that lots of logging will cause truncation
#define? VBSCA_LOGFILE_EXTENSION                 .log
#define? VBSCA_LOGFILE_EXP_4_DEFAULT_BASENAME    "<$VBSCA_LOGFILE_BASENAME_PREFIX><$VBSCA_LOGFILE_BASENAME_MIDDLE><$VBSCA_LOGFILE_BASENAME_SUFFIX><$VBSCA_LOGFILE_EXTENSION>"   ;;Any VB Expression ("BINARY" parameter is passed)
#define? VBSCA_LOGFILE_MAX_AGE_IN_DAYS           100                 ;;If older than this then whole file removed prior to logging starting (0=Do Nothing)
#define? VBSCA_LOGFILE_MAX_SIZE_IN_K             300                 ;;If bigger than this many K then shorten (before logging - so log can grow larger than this)
#define? VBSCA_LOGFILE_REDUCE_TO_PERCENTAGE      75                  ;;If log is too big then reduce it to what percentage of max size?
#define? VBSCA_LOG_EXP_4_ADD_2_HEADER                                ;;Define to hold appropiate calls to "CaDebug"


;----------------------------------------------------------------------------
;--- Allow overriding of default logging behaviour --------------------------
;----------------------------------------------------------------------------
#define? VBSCA_DEBUG1  CaDebug 1,           ;;Line 1 output goes to line 1, allow redirection, example: CaDebug 0,
#define? VBSCA_DEBUG2  CaDebug 2,           ;;Line 2 output goes to line 2
#define? VBSCA_DEBUG0  CaDebug 0,           ;;Log    output goes to log.


;----------------------------------------------------------------------------
;--- Custom Action conditions -----------------------------------------------
;----------------------------------------------------------------------------
#define? VBSCA_CONDITION_INSTALL_ONLY    <$CONDITION_INSTALL_ONLY>
#define? VBSCA_CONDITION_UNINSTALL_ONLY  <$CONDITION_UNINSTALL_ONLY>
;---[4DocoVbsCaRelatedOptions]---


;----------------------------------------------------------------------------
;--- Optional Code (you may wish to reduce size of scripts) -----------------
;----------------------------------------------------------------------------
;---[4DocoVbsCaRelatedOptionalCode]---
;--- Defaults for the "OptCode" parameter -----------------------------------
#define? VBSCA_WANT_VbsCaCadGetValidate   Y     ;;Want VbsCaCadGetValidate() Y/N?
#define? VBSCA_WANT_CaDeleteFile          Y     ;;Want CaDeleteFile() Y/N?
#define? VBSCA_WANT_CaSleep               N     ;;Want CaSleep() Y/N? - wscript.sleep unavailable in CA!
;---[4DocoVbsCaRelatedOptionalCode]---

;---[4DocoVbsCaRelatedOptionalCodeDefinition]---
;--- We need to define all possible values which can be used in for "OptCode" ---
#define? VBSCA_OPCODE_LIST_USER_DEFINED         ;;List of ";" delimitered user defined routines/keywords (user must also create "VBSCA_WANT_?" definitions like the above)
#(  ';'
    #define VBSCA_OPCODE_LIST                   ;;User shouldn't override this! Here for visibility.

    ;--- Add MAKEMSI defined to list ----------------------------------------
    CaDeleteFile
    CaSleep
    VbsCaCadGetValidate

    ;--- Add user defined to list -------------------------------------------
    <$VBSCA_OPCODE_LIST_USER_DEFINED>
#)
;---[4DocoVbsCaRelatedOptionalCodeDefinition]---


;--- Add to the generated code ----------------------------------------------
#( '<?NewLine>'
   #define VbScriptVariablesEtc

   dim InLineScript
#)



;--- Clean out any existing VBSCRIPTS directory (don't want obsolete files) ---
#ifndef VBSCA_DONT_INITIALIZE_VBSCRIPTS_DIRECTORY
   ;--- User is allowing directory to be deleted ----------------------------
   #if ['<$VBSCA_USE_FILEMAKE_TO_CREATE_BINARY_VBS>' = 'N']
       ;--- And we aren't using "FileMake" so we can do so... ---------------
       #ifdef IsNT
           ;--- And we are also capable of deleting the files... ------------
           #DefineRexx ''
               call AddressCmd 'rd "<$MAKEMSI_VBSCA_DIR>" /q /s >nul <$Stderr2Out>'
           #DefineRexx
       #end if
   #endif
#endif



;----------------------------------------------------------------------------
;--- Indicates the start of a VBS custom action Script ----------------------
;----------------------------------------------------------------------------
#RexxVar @@VbsCaNesting = 0
#RexxVar @@FunctionCnt  = 0
#RexxVar @@Binary       = ""
#define @@LOG_NEEDS_INITIALIZATION            -1
#define @@LOG_NEEDS_INITIALIZATION_STARTED     0
#define @@LOG_NEEDS_INITIALIZATION_COMPLETE    1
#define @@VBSCA_TRAP_FLAG                      VbsCaRaiseError()
#define INLINE_MARKS_START_USER_CODE           --- User Code Follows ---
#define VBSCRIPT_LINE_COMMENT_CHARS            '
#define SCRIPT_INLINE_TEMP_NEWLINE_MARKER      <*MarksNewLine*>           ;;Used by "VB" and "J" SCRIPT
#define+ @@VbsFileMakeNoCache \
         #output  "<??@@OutFile>" ASIS
#define+ /@@VbsFileMakeNoCache \
         #output
#( '<?NewLine>'
   ;--- Define macro to create VBS and add it to the binary table -----------
   #define VbsCa
   <$UpdateMmLocation>

   ;--- Basic Validation ----------------------------------------------------
   {$!KEYWORDS}                        ;;Don't Expect any keywords!
   {$!:BINARY,DOCO,LINE1,ERRORRC,LOGFILE,DEFINE,DATA,DEL,ERR.NUMBER,FILENAME,PAUSE,OPTCODE}
   #RexxVar @@DisabledMsg = '<$VBSCA_DISABLED>'
   #if [@@DisabledMsg <> '']
       ;--- User does not want any scripts created! -------------------------
       #error ^<??@@DisabledMsg>^
   #endif

   ;--- Nesting validation --------------------------------------------------
   #PUSH "VbsCa"
   #RexxVar @@VbsCaNesting + 1
   #if [@@VbsCaNesting <> 1]
       #error ^You can't nest the "VbsCa" macro!^
   #endif

   ;--- Initialize the function counter -------------------------------------
   #RexxVar @@FunctionCnt  = 0

   ;--- Initialize the default entry point for testing ----------------------
   #RexxVar @@DefaultTestingFunction = ''

   ;--- Want the binary added to the documenation? --------------------------
   #Rexxvar @@DocoParameter = '{$Doco=^<$DEFAULT_VBSCA_DOCO>^}'

   ;--- Do stuff... ---------------------------------------------------------
   #evaluate ^^ ^<$@@Rexx4VbsCa {$?}>^

   ;--- Use #Output or "FileMake" macro? ------------------------------------
   #define+ VBSCA_THIS_SCRIPT_IS_USING_FILEMAKE N                                     ;;User may wish to refer to this (to mark insignificant parts)...
   #define+ @@VbsFileStart                                <$@@VbsFileMakeNoCache>     ;;Not sure why I need in include via macro for #output to apply...
   #define+ @@VbsFileEnd                                  <$/@@VbsFileMakeNoCache>
   #if  ['<$VBSCA_USE_FILEMAKE_TO_CREATE_BINARY_VBS>' <> 'N']
        ;--- User is allowing us to use "FileMake" --------------------------
        #if  [@@ScriptTypeInline = 'N']
             ;--- Its not inline (where its pointless) ----------------------
             #define+ VBSCA_THIS_SCRIPT_IS_USING_FILEMAKE Y
             #define+ @@VbsFileStart                      <$FileMake "<??@@OutFile>">
             #define+ @@VbsFileEnd                        <$/FileMake>
        #endif
   #endif

   ;--- All following stuff goes into the SCRIPT ----------------------------
   <$@@VbsFileStart>
   #if  [@@ScriptTypeInline = 'Y']
        ;--- Inline ---------------------------------------------------------
        <?SyntaxCheck>
        <$VBSCRIPT_LINE_COMMENT_CHARS><$INLINE_MARKS_START_USER_CODE><?NewLine>
   #elseif
        ;--- Binary ---------------------------------------------------------
        <$VBSCA_CA_BINARY_START {$?ResetUsed}{$?}>
   #endif
#)



#DefineRexx '@@Rexx4VbsCa'
   ;--- Type of CA and name of binary (if actually a binary) ----------------
   @@Binary = "{$Binary}";
   if   left(@@Binary, 1) = '!' then
   do
        ;--- Not a binary but inline VBSCRIPT CA TYPE "38" ------------------
        @@ScriptTypeInline = 'Y';
        @@OutFile       = '<$MAKEMSI_VBSCA_DIR>\' || @@Binary || '.inline.vbs';
        @@Binary        = substr(@@Binary, 2);
   end;
   else
   do
        ;--- A normal Binary file added to the binary table -----------------
        @@ScriptTypeInline = 'N';
        @@OutFile = '<$MAKEMSI_VBSCA_DIR>\{$FileName=^{$Binary}^}';
        if  translate( right(@@OutFile, 4) ) <> '.VBS' then
            @@OutFile = @@OutFile || '.vbs';
   end;
   #if  ['<$DBG_VBSCA>' <> 'N']
        <$DBG_SAY> 'VbsCa command, Is inline CA: ' || @@ScriptTypeInline
        <$DBG_INC>
   #endif

   ;--- Look at optional routines, include which ones? ----------------------
   @@OptCodes = '<$VBSCA_OPCODE_LIST>';
   do while @@OptCodes <> ''
      ;--- Set defaults for all option routines -----------------------------
      parse var @@OptCodes @@OptCode ';' @@OptCodes;
      call value "@@Want_" || @@OptCode, translate( ReplaceMacros(MacroGet('VBSCA_WANT_' || @@OptCode)) );
   end;
   @@Routines = '{$OptCode=''}'
   #if  ['<$DBG_VBSCA>' <> 'N']
        <$DBG_SAY> 'Wanted routines: ' || @@Routines
   #endif
   do   while @@Routines <> ''
        ;--- Get next item --------------------------------------------------
        parse var @@Routines @@Routine @@Routines

        ;--- Update the flag accordingly ------------------------------------
        @@L1 = left(@@Routine, 1)
        if  @@L1 = '+' |  @@L1 = '-' then
            @@Routine = substr(@@Routine, 2)
        @@RxVar = '@@Want_' || @@Routine;
        if  symbol(@@RxVar) <> 'VAR' then
            error('There appears to be no optional VBSCRIPT code called "' || @@Routine || '"!');
        if  @@L1 = '-' then
            @@Want = 'N';               ;;We don't need the routine
        else
            @@Want = 'Y'                ;;We need the routine
        call value @@RxVar, @@Want;     ;;Update the variable
   end;
   #if  ['<$DBG_VBSCA>' <> 'N']
        <$DBG_DEC>
   #endif
#DefineRexx


;----------------------------------------------------------------------------
;--- Start FUNCTION Entry point ---------------------------------------------
;----------------------------------------------------------------------------
#( '<?NewLine>'
   ;--- Start user function macro -------------------------------------------
   #define VbsCaEntry
   {$!KEYWORDS}  ;;Don't Expect any keywords!

   ;--- Nesting validation --------------------------------------------------
   #push "VbsCaEntry (VBS CUSTOM ACTION ENTRY POINT)"
   #if [@@VbsCaNesting <> 1]
       #error ^This macro can only be used with a "VbsCa" block!^
   #endif

   ;--- Remember the name of the function -----------------------------------
   #RexxVar @@FunctionCnt                  + 1
   #RexxVar @@Function.@@FunctionCnt       = '{$#1}'
   #RexxVar @@FunctionOnTrap.@@FunctionCnt = '{$OnTrap=''}'   ;;Code to do some processing on exception!

   ;--- Output command line testing stub when first entry encountered -------
   #if [@@FunctionCnt = 1]
       ;--- Output a call to the VBSCRIPT testing stub ----------------------
       <?NewLine><?NewLine>
       VbsScriptTestingStub()

       ;--- This is by default the default testing function -----------------
       #RexxVar @@DefaultTestingFunction = '{$#1}'
   #endif

   ;--- Does the user wish this function to be the default for testing? -----
   #if ['{$Default='N'}' = 'Y']
       ;--- Yes -------------------------------------------------------------
       #RexxVar @@DefaultTestingFunction = '{$#1}'
   #endif

   ;--- Create a macro which the user can refer to to update return code ----
   #define+ VbsCaEntryName  USER_{$#1}

   ;--- Start the function --------------------------------------------------
   <?NewLine>
   <?NewLine>
   '=====================
   function <$VbsCaEntryName>()   'Entry Point "<??@@Function.@@FunctionCnt>()"
   '=====================
       ;--- Want this code to immediately return on trap --------------------
       on error goto 0

       ;--- Set return code to OK and log a message -------------------------
       <$VBSCA_DEBUG2> "<$VbsCaEntryName>() - User function starting..."
       CaDebugPause("<??@@Function.@@FunctionCnt>() - START")
       VbsCaLogInc 1
       <$VbsCaEntryName> = 0
       <?NewLine>
       <?NewLine>

   ;--- Check parameter usage -----------------------------------------------
   {$!}
#)




;----------------------------------------------------------------------------
;--- End FUNCTION Entry point -----------------------------------------------
;----------------------------------------------------------------------------
#( '<?NewLine>'
   ;--- End user function macro ---------------------------------------------
   #define /VbsCaEntry

   ;--- Nesting validation --------------------------------------------------
   #pop  "VbsCaEntry (VBS CUSTOM ACTION ENTRY POINT)"

   ;--- Thats the end of the user code, looks like the function succeeded! ---
       <?NewLine>
       <?NewLine>
       dim ErrText
       if   err.number = 0  then
            ErrText = ", err.number was 0"
       else
           ;--- Have found an error -----------------------------------------
           ErrText = ", ErrorNumber = 0x" & hex(err.number) & " (" & err.number & ")"
           if   err.Description <> "" then
                ErrText = ErrText & "  => " & err.Description
           end if
       end if
       VbsCaLogInc -1
       <$VBSCA_DEBUG2> "<$VbsCaEntryName>() - User function FINISHED, RC = " & <$VbsCaEntryName> & ErrText
       CaDebugPause("<??@@Function.@@FunctionCnt>() - END" & ErrText)
       CloseLogFile_()

       ;--- If we got here we will consider this successful -----------------
       err.clear()
   end function

   ;--- Check parameter usage -----------------------------------------------
   {$!}
#)


;----------------------------------------------------------------------------
;--- End VBS ----------------------------------------------------------------
;----------------------------------------------------------------------------
#( '<?NewLine>'
   ;--- Define macro to create VBS and add it to the binary table -----------
   #define /VbsCa
   ;<$UpdateMmLocation>            ;;Can't do this as output goes to wrong place!

   ;--- Nesting validation --------------------------------------------------
   #POP "VbsCa"
   #RexxVar @@VbsCaNesting - 1
   #if [@@VbsCaNesting <> 0]
       #error ^This block end macro used before start defined!!^
   #endif

   ;--- End of VBSCRIPT -----------------------------------------------------
   #if  [@@ScriptTypeInline = 'N']
      ;--- There must be at least one entry point! --------------------------
      #if [@@FunctionCnt < 1]
          #error ^You did not define any function entry points (with "VbsCaEntry")!^
      #endif
      <$VBSCA_CA_BINARY_END>
   #endif
   <$@@VbsFileEnd>

   ;--- Do what with the generated file? ------------------------------------
   #if  [@@ScriptTypeInline = 'Y']
        ;--- Just remember the details --------------------------------------
        #RexxVar "INLINE_VBS_<??@@Binary>" = "<??@@OutFile>"
   #elseif
       ;--- Add to the binary table -----------------------------------------
       <$Binary KEY="<??@@Binary>" "<??@@OutFile>" Comment="<$VBSCA_BINARY_COMMENT>" DOCO="<??@@DocoParameter>">
   #endif
#)


;----------------------------------------------------------------------------
;--- Set up custom actions (schedule etc) -----------------------------------
;----------------------------------------------------------------------------
#(
    #define VbsCaSetup
    <$ScriptCaSetup ScriptType="VBS" {$?}>
#)
#(
    #define ScriptCaPropertyCaHackMacro
    <$PropertyCa "<??@@Key>"           ;;Property name
             Seq="@SeqCad"             ;;VBS variable
        SeqTable="<??SET_SeqTable>"
           Value="<??@@CaDataValue>"
       Condition="<??@@Condition>"
             KEY="<??@@Key>_CAD_SETUP"
    >
#)
#ifdef @@HACK
    ;---[PropertyCaHack]---
    <$ScriptCaPropertyCaHackMacro>
    ;---[PropertyCaHack]---
#endif
#( '<?NewLine>'
   #define ScriptCaSetup
   <$UpdateMmLocation>
   {$!KEYWORDS}  ;;Don't Expect any keywords!

   ;--- Need to handle the "DATA" parameter ---------------------------------
   #evaluate ^^ ^<$@@Rexx4ScriptCaSetup {$?}>^

   ;--- Point to the custom action ------------------------------------------
   <$TABLE "CustomAction">
   #if  [@@ScriptTypeInline = 'Y']
        ;--- Inline Script, fix newline up etc ------------------------------
        InLineScript = "<??@@InLineScript>"       ;;The code is in the rexx variable, so update VBSCRIPT variable now!
        InLineScript = replace(InLineScript, "<$SCRIPT_INLINE_TEMP_NEWLINE_MARKER>", vbLF)

        ;--- Now define CA --------------------------------------------------
        #if [@@TypeEx = '']
           #(
               <$Row
                   Action="<??@@Key>"     ;;CA key
                   Source=""
                    *Type="<??@@Type>"    ;;Run VBS, deferred etc?
                  *Target="InLineScript"     ;;The code is containined in the VBS variable
                @Validate=^<${$ScriptType}CA_ROW_@VALIDATE_INLINE>^ ;;How is this row validated?
               >
           #)
        #elseif
           #(
               <$Row
                   Action="<??@@Key>"     ;;CA key
                   Source=""
                    *Type="<??@@Type>"    ;;Run VBS, deferred etc?
            *ExtendedType="<??@@TypeEx>"
                  *Target="InLineScript"     ;;The code is containined in the VBS variable
                @Validate=^<${$ScriptType}CA_ROW_@VALIDATE_INLINE>^ ;;How is this row validated?
               >
           #)
        #endif
        #if ['<$VBSCA_INLINE_DISABLE_TARGET_VALIDATION $$IsBlank>' <> 'Y']
            ;--- Allow "Target" column to go past 255 (normal) limit --------
            <$MsiValFilter =^<$VBSCA_INLINE_DISABLE_TARGET_VALIDATION>^ Comment=^Allow the "Target" column to go past 255 (normal) limit, the vbscript will not be truncated etc^>
            #define+ VBSCA_INLINE_DISABLE_TARGET_VALIDATION     ;;Blank out so only do once...
        #endif
   #elseif
        ;--- Script in BINARY table -----------------------------------------
        #if [@@TypeEx = '']
           #(
               <$Row
                   Action="<??@@Key>"     ;;CA key
                   Source="{$Binary}"     ;;Key into Binary table
                    *Type="<??@@Type>"    ;;Run VBS, deferred etc?
                   Target="<??@@Entry>"   ;;VBS Entry point
                @Validate=^<${$ScriptType}CA_ROW_@VALIDATE>^ ;;How is this row validated?
               >
           #)
        #elseif
           #(
               <$Row
                   Action="<??@@Key>"     ;;CA key
                   Source="{$Binary}"     ;;Key into Binary table
                    *Type="<??@@Type>"    ;;Run VBS, deferred etc?
            *ExtendedType="<??@@TypeEx>"
                   Target="<??@@Entry>"   ;;VBS Entry point
                @Validate=^<${$ScriptType}CA_ROW_@VALIDATE>^ ;;How is this row validated?
               >
           #)
        #endif
   #endif
   <$/TABLE>

   ;--- Install in SEQUENCE table(s) ----------------------------------------
   #if  [@@SeqTables = '']
        #if [@@Seq <> "0"]
            #error ^No sequence tables were specified and the sequence number was not 0 (zero)!^
        #endif
   #endif
   #{ SET "SeqTable={ }<??@@SeqTables>"
       ;--- What sequence numbers will we use? ------------------------------
       SeqNo = <$@@SeqExpression "<??SET_SeqTable>"> ;;Set the VBS variable "SeqNo"
       #if  [@@SeqNeed <> 1]
            SeqCad = SeqNo                 ;;CAD seq #
            SeqNo  = SeqNo + 1             ;;VBS seq #
       #endif

       ;--- Install in the specified table ----------------------------------
       <$TABLE "<??SET_SeqTable>">
       #(
           <$Row
                  Action="<??@@Key>"        ;;CA Key
               Condition=~<??@@Condition>~  ;;Execute under what condition?
               *Sequence="SeqNo"            ;;Execute when (value in VBS variable)?
               @Validate=^<${$ScriptType}CA_ROW_@VALIDATE>^ ;;How is this row validated?
           >
       #)
       <$/TABLE>

       ;--- Set up "CustomActionData" ---------------------------------------
       #if  [@@SeqNeed <> 1]
            ;--- Generate CustomActionData setup ----------------------------
            #include "<??@@ThisFile>" "[PropertyCaHack]"  ;;Note: Overwrites "SeqNo" variable!
       #endif
   #}

   ;--- Add action text -----------------------------------------------------
   <$TABLE "ActionText">
   #(
       <$Row
               Action="<??@@Key>"                           ;;CA Key
          Description="{$Description=^{$ScriptType} CA: <??@@Key>^}"  ;;Text for progress bar line 1
            @Validate=^<${$ScriptType}CA_ROW_@VALIDATE>^ ;;How is this row validated?
       >
   #)
   <$/TABLE>

   ;--- Check parameter usage -----------------------------------------------
   {$!:BINARY,ENTRY,DATA,DEL,SEQ,SEQTABLE,KEY,DESCRIPTION,CONDITION,DEFERRED,SYNC,RC0,COMMIT,ROLLBACK,IMPERSONATE,TYPE,SCRIPTTYPE}
#)
#RexxVar @@ThisFile = '<?InputComponent>'
#DefineRexx '@@Rexx4ScriptCaSetup' NoPack
   @@Binary = "{$Binary}";
   if   left(@@Binary, 1) = '!' then
   do
        ;--- Not a binary but inline VBSCRIPT CA TYPE "38" ------------------
        @@ScriptTypeInline = 'Y';
        @@Entry            = 'NotRequired!'
        @@Binary = substr(@@Binary, 2);
        {$Key=^^ $$RxVar:@@Key}
        IF  @@key = '' then
            @@Key = @@Binary;

        ;--- Set BASE CA type then user defaults on top of those ------------
        @@Attributes     = '<$CATYPE_{$ScriptType}CRIPT_IN_CA_TABLE>'
        @@TypeAttributes = '<${$ScriptType}CA_DEFAULT_TYPE_ATTRIBUTES_INLINE> {$Type=^^}';

        ;--- Make sure we have defined the script earlier! ------------------
        @@FileNameIn = 'INLINE_{$ScriptType}_' || @@Binary;
        if  symbol(@@FileNameIn) <> 'VAR' then
            call error 'You haven''t defined the inline SCRIPT "!' || @@Binary || '"'
        @@ScriptFile = value(@@FileNameIn);

        ;--- Read the script into the rexx variable -------------------------
        @@InLineScript   = '';
        @@FndStart       = 'N'
        @@LineCmtChars   = "<${$ScriptType}CRIPT_LINE_COMMENT_CHARS>"       ;;Either "'" or "//"
        @@UserCdeFollows = @@LineCmtChars || "<$INLINE_MARKS_START_USER_CODE>";
        do  while lines(@@ScriptFile) <> 0
            ;--- All lines should have a tab (process name ends with tab) -------
            @@Line  = strip(linein(@@ScriptFile));
            if  @@FndStart = 'N' then
            do
                ;--- Still looking for the start! ---------------------------
                if  @@Line = @@UserCdeFollows then
                    @@FndStart = 'Y'
            end;
            else
            do
                ;--- Collect this line (if not VBS comment) -----------------
                if  left(@@Line, length(@@LineCmtChars)) <> @@LineCmtChars then
                do
                    ;--- Not a SCRIPT comment line --------------------------
                    if  @@InLineScript <> '' then
                        @@InLineScript = @@InLineScript || "<$SCRIPT_INLINE_TEMP_NEWLINE_MARKER>"
                    @@InLineScript = @@InLineScript || @@Line
                end;
            end;
        end;
        call FileClose @@ScriptFile;

        ;--- Handle any issues that specific imbedded characters may cause ---
        <$NotMsiFmt InVar="@@InLineScript">                         ;;Handle "[" etc as "Target" column of "CustomAction" table is formatted field!
        @@InLineScript = ReplaceString(@@InLineScript, '"', '""');  ;;Double up quotes as this will be imbedded in a VBSCRIPT literal
        if @@InLineScript = '' then
        do
            ;--- Something wrong! -------------------------------------------
            <$RexxDebugViewFile FileVar="@@ScriptFile">   ;;Display in notepad (can be turned off)
            call error 'Did not find any code in "' || @@ScriptFile || '".',, 'Expected your script in lines FOLLOWING: ' || @@UserCdeFollows
        end;
   end;
   else
   do
        ;--- Must have specified an entry point! ----------------------------
        @@Entry = '{$Entry=^^}';
        if  @@Entry = '' then
            call error 'You forgot to supply the ENTRY parameter!'

        ;--- A normal Binary file added to the binary table -----------------
        @@ScriptTypeInline = 'N';
        @@Key = '{$Key=^^}'
        if  @@Key = '' then
            @@Key = '{$ScriptType}CA_' || @@Binary || '_' || @@Entry;

        ;--- Set BASE CA type then user defaults on top of those ------------
        @@Attributes     = '<$CATYPE_{$ScriptType}CRIPT_IN_BINARY_TABLE>'
        @@TypeAttributes = '<${$ScriptType}CA_DEFAULT_TYPE_ATTRIBUTES> {$Type=^^}';
   end;

   ;--- Make sure key only contains valid characters ------------------------
   <$Rexx2CheckMsiId IdVar="@@Key" What="custom action key">

   ;--- Add any extra attributes to build complete custom action type -------
   <$CaType.Rexx2ProcessCaAttributes {$?} TypeVar=^@@Type^ TypeExVar=^@@TypeEx^ AttributeVar=^@@Attributes^ TypeAttributesVar=^@@TypeAttributes^>

   ;--- Get space seperated list of table names --------------------------------
   @@SeqTables = '{$SeqTable=^<$DEFAULT_VBSCA_SEQTABLE>^}';
   ;@@SeqTables = translate(@@SeqTables,, <$SUNDRY_STANDARD_DELIMITERS_REXXEXP> || ',;', ' ');
   <$Rexx2ConvertDelimitersToSpaces RxVar="@@SeqTables">

   ;--- Get Condition -------------------------------------------------------
   {$Condition $$RxVar:@@Condition}

   ;--- Do we have a DATA parameter? ----------------------------------------
   if  '{$Data=^^}' = '' then
       @@SeqNeed = 1;
   else
   do
       ;--- We have custom action data --------------------------------------
       @@SeqNeed = 2;

       ;--- Handle the data, delimiter information --------------------------
       <$Rexx2BuildScriptCaData {$?ResetUsed}{$?} DelDefault=^<$DEFAULT_VBSCA_CAD_DELIMITER>^>
   end

   ;--- Handle Sequence number parameter ------------------------------------
   @@Seq = '{$Seq}';
   <$SeqNumberRexx2CreateSequenceNumberExpression SEQ="@@Seq" Macro="@@SeqExpression" Number="@@SeqNeed">;
#DefineRexx
#DefineRexx 'Rexx2BuildScriptCaData'
   @@Data   = '{$Data=^^}';
   @@ColCnt = 0                     ;;No data
   @@S      = '';                   ;;No data
   @@DS     = '';                   ;;No data
   if  @@Data <> '' then
   do
       ;--- Get Delimiter info ----------------------------------------------
       @@CadDel = '{$Del=^{$DelDefault}^}';
       @@CadDel = @@CadDel;
       @@DelLng = length(@@CadDel);
       if  @@DelLng = 0 | @@DelLng > 9 then
           error('Invalid Delimiter of "' || @@CadDel || '" (must be 1-9 characters)');

       ;--- Make sure the DATA has 2 columns --------------------------------
       if  DataInfo(@@Data) = '' then
           error('CustomActionData "' || @@Data || '" does not exist!');
       @@ColCnt = DataInfo(@@Data || '.*.?')
       if  @@ColCnt <> 2 & @@ColCnt <> 3 & @@ColCnt <> 0 then
           error('CustomActionData "' || @@Data || '" should have had 2 or 3 columns, not ' || @@ColCnt || '!')

       ;--- Collect all parameter/value pairs as a single string ('FF'x as delimiter) ---
       @@S  = @@DelLng || @@CadDel;
       @@DS = @@S
       do  @@x = 1 to {$DATA}.0
           ;--- Need delimiter? ---------------------------------------------
           if  @@x <> 1 then
           do
               @@S  = @@S  || @@CadDel;
               @@DS = @@DS || @@CadDel;
           end

           ;--- Add to the string -------------------------------------------
           @@Pair = ReplaceMacros( {$DATA}.@@x.1 || '=' || {$DATA}.@@x.2 )
           @@S = @@S || @@Pair;
           if   @@ColCnt = 3 then
           do
               ;--- Update the default string -------------------------------
               @@Pair = ReplaceMacros( {$DATA}.@@x.1 || '=' || {$DATA}.@@x.3 );
               @@DS = @@DS || @@Pair;
           end
       end;
   end;

   ;--- Replace any macros and take care of double quotes if required -------
   @@S = ReplaceMacros(@@S);
   if  '{$4STRING=^N^}' == 'Y' then
       ;--- @@S will be placed inside a VBS string so take care of double quotes! ---
       @@S  = ReplaceString(@@S,  '"', '""');
       @@DS = ReplaceString(@@DS, '"', '""');
       if   @@ColCnt = 2 then
            @@DS = @@S
   @@CaDataValue        = @@S
   @@CaDataValueDefault = @@DS
#DefineRexx






#include "VbsCa-StartEnd.MMH"
#NextId UNLOCK "VBSCA.MMH"

