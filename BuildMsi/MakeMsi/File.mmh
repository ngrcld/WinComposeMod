;----------------------------------------------------------------------------
;
;    MODULE NAME:   FILE.MMH
;
;        $Author:   USER "Dennis"  $
;      $Revision:   1.72  $
;          $Date:   04 Jul 2018 18:30:32  $
;       $Logfile:   D:/DBAREIS/Projects.PVCS/Win32/MakeMsi/File.mmh.pvcs  $
;      COPYRIGHT:   (C)opyright Dennis Bareis, Australia, 2003
;                   All rights reserved.
;
;    DESCRIPTION:   Do not include this header directly, use 'MAKEMSI.MMH'
;                   instead.
;----------------------------------------------------------------------------
#NextId
#NextId LOCK "FILE.MMH"


;----------------------------------------------------------------------------
;--- Self Registration Options ----------------------------------------------
;----------------------------------------------------------------------------
;---[4DocoSelfRegistrationOptions]---
#define? DEFAULT_FILE_SELFREGISTER                             N         ;;N=Never, Y=Unordered, ?=Unordered Self register if binary supports it, else ordered self registration
#define? FILE_AUTOMATIC_SELF_REGISTRATION_RECORD_NO            Y         ;;We are interested in when self registration was not done (html report)
#define? FILE_AUTOMATIC_SELF_REGISTRATION_DETECT_ERROR_ACTION  S         ;;D=Die, S=Say & Ignore, I=Ignore (if not 'D' we assume testing will show up issues...)
#define? FILE_AUTOMATIC_SELF_REGISTRATION_RECORD_NO_OK_VBEXP   "<span title='We successfully determined that this file does not have self registration entry points!'>No</span>"
#define? FILE_AUTOMATIC_SELF_REGISTRATION_RECORD_NO_ERR_VBEXP  "<span title=""" & {$ErrDescVar} & """>No<font color=red>?</font></span>"
#define? FILE_SUPPORT_WINDOWS_HARDLINKS_BUG                    Y          ;;Windows file hardlink support flawed.
#( ';'
   ;--- Semi colon (";") delimitered list of file extensions ----------------
   #define? FILE_EXTENSIONS_WHICH_MAY_SELF_REGISTER
   .dll
   .ocx
#)
;---[4DocoSelfRegistrationOptions]---


;----------------------------------------------------------------------------
;--- Other Options ----------------------------------------------------------
;----------------------------------------------------------------------------
;---[4DocoMainFileRelatedOptions]---
#define? DEFAULT_FILE_WANT_FILEHASH                  T         ;;Generate MD5 (Y=YES, N=NO, T=TRY). MD5 needs Windows Installer 2.0+
#define? DEFAULT_FILE_ATTRIBUTES                     Vital     ;;Only use if user did not supply
#define? DEFAULT_FILE_ATTRIBUTES_TO_COPY                       ;;Choose one or more from hidden/system/readonly
#define? DEFAULT_FILE_LANG_WHEN_GETLANGUAGE_FAILS    1033      ;;Can be ""
#define? DEFAULT_FILE_ACCESS
#define? DEFAULT_FILE_REMOVE                         N         ;;Don't remove files by default!
#define? DEFAULT_FILE_DATE                                     ;;""= file date or date in "YYYY-MM-DD" (exactly 10 characters)
#define? DEFAULT_FILE_TIME                                     ;;""= file time or time in "HH:mm:SS"   (exactly 8 characters and seconds even)
#define? DEFAULT_FILE_DOCO                           Y         ;;"N" = Don't add to doco (by default)
#define? DEFAULT_FILE_OPTIONS4COMPONENT                        ;;Any options for autocreated components
#define? DEFAULT_FILE_OPTION_MAKE_REMOVE_DIRECTORIES Y         ;;Now make/remove directories by default
#define? FILE_HTMLRPT_INSTALLTIME_COMMENT_TEXT          *          ;;What the user sees
#define? FILE_HTMLRPT_INSTALLTIME_COMMENT_HTML          <span title='The install time of the file will be &quot;{?}&quot;'><font color=red><$FILE_HTMLRPT_INSTALLTIME_COMMENT_TEXT></font></span>     ;;Don't use Double quotes and ONLY the text in the "FILE_HTMLRPT_INSTALLTIME_COMMENT_TEXT" macro should be visible to user (or sorting won't work correctly)!!!
#define? FILE_GENERATED_COMPONENT_PREFIX                c          ;;Begins any components generated by the "file(s)" commands, followed by unique number ("" means don't add unique prefix)
#define? FILE_GENERATED_COMPONENT_USE_FILE_AS_KEYPATH   Y          ;;Must be "Y" unless you have set a keypath in the "Options4Component" parameter (in which case should be "N")!
#define? FILE_GENERATED_COMPONENT_MAX_LENGTH            <$TABLES_LNG_COMPONENT_COLUMN>  ;;Should be shorter than or equal to value in "TABLES_LNG_COMPONENT_COLUMN" (see doco for error code 2716)
#( ';'
   ;--- Semi colon (";") delimitered list of file extensions ----------------
   #define? FILE_EXTENSIONS_WHICH_NEED_OWN_COMPONENT    ;;"*" means all
   .exe
   .dll
   .ocx
   .hlp
   .chm
#)
#define? FILE_COMMAND_ALLOWED                                      ;;If not blank then not allowed and is the error message. You can use "{NL}" to represent newlines
#define? FILE_VERSION_FOR_UNVERSIONED_FILES
#define? DEFAULT_FILE_ROWKEY_CASE                                  ;;Can be "" or "L" or "U"
#define? DEFAULT_FILE_ROWKEY_MAXLNG               <$TABLES_LNG_FILE_COLUMN>-4   ;;0 = no restriction (this limit is WITHOUT any possible number added to make unique!)
#define? FILE_HTMLRPT_HR                          <$SUNDRY_HTMLRPT_HR>
#define? FILE_HTMLRPT_ROWKEY                      MAKEMSI_Documentation     ;;Name of special case which does not exist when code generated!
#define? FILE_HTMLRPT_MAX_EXTENSION_WIDTH         7
#define? FILE_STYLE_TEXT_ERROR                    color:red
#define? FILE_STYLE_TEXT_OK                       color:green
#define? FILE_VERIFY_STYLE_FILENAME_DEFAULT_LOCN  color:blue
#define? FILE_VERIFY_OUTPUT_BACKGROUND_COLOR      #dfdfdf
#define? FILE_VERIFY_SHOW_COMPONENT_OK_MESSAGE_WHEN_FILES_ALSO_OK N
#define? FILE_VERIFY_ATTRIBUTE_SET.H              <b>H</b>
#define? FILE_VERIFY_ATTRIBUTE_SET.R              <b>R</b>
#define? FILE_VERIFY_ATTRIBUTE_SET.S              <b>S</b>
#define? FILE_VERIFY_ATTRIBUTE_RESET.H            h
#define? FILE_VERIFY_ATTRIBUTE_RESET.R            r
#define? FILE_VERIFY_ATTRIBUTE_RESET.S            s

#( '<?NewLine>'
   #define? FILE_STYLES

   .FileCmtPlus             {font-size:9pt;}
   .FileCmtName             {<$HTMLRPT_STYLE_VALUES_KEY>}
   .FileCmtValue            {<$HTMLRPT_STYLE_VALUES_VALUE>}
   .FileCmtSFI              {color:maroon}
   <$FILE_STYLES_VERIFY>
   <$FILE_STYLES_VERIFY_COMPONENT_CHECKS>
#)
#( '<?NewLine>'
   #define? FILE_STYLES_VERIFY

   .FileVerify_DoesNotExist    {<$FILE_STYLE_TEXT_ERROR>}
   .FileVerify_FileNameDefault {<$FILE_VERIFY_STYLE_FILENAME_DEFAULT_LOCN>}
   .FileVerify_CantAccess   {<$FILE_STYLE_TEXT_ERROR>}
   .FileVerify_OK           {<$FILE_STYLE_TEXT_OK>}
   .FileVerify_MisMatch     {<$FILE_STYLE_TEXT_ERROR>}
   .FileVerifyNoActiveX     {<$FILE_STYLE_TEXT_ERROR>}
   .FileVerifyProductErr    {<$FILE_STYLE_TEXT_ERROR>}
   .FileVerifyProductOK     {<$FILE_STYLE_TEXT_OK>}
#)
#( '<?NewLine>'
   #define? FILE_STYLES_VERIFY_COMPONENT_CHECKS

   .FileVerify_ComponentUnmanaged                      {}
   .FileVerify_ComponentNotInstalledAndFileDoesntExist {<$FILE_STYLE_TEXT_OK>}
   .FileVerify_ComponentInstalledAndFileOk             {<$FILE_STYLE_TEXT_OK>}
   .FileVerify_GuidUnknown                             {<$FILE_STYLE_TEXT_ERROR>}
   .FileVerify_ComponentNotInstalledButFileOk          {<$FILE_STYLE_TEXT_ERROR>}
   .FileVerify_ComponentNotInstalledAndFileDoesntMatch {<$FILE_STYLE_TEXT_ERROR>}
   .FileVerify_ComponentInstalledButFileDoesntMatch    {<$FILE_STYLE_TEXT_ERROR>}
#)
;---[4DocoMainFileRelatedOptions]---


;----------------------------------------------------------------------------
;--- Initialization ---------------------------------------------------------
;----------------------------------------------------------------------------
#RexxVar @@DateStar      = ^<$FILE_HTMLRPT_INSTALLTIME_COMMENT_HTML>^
#RexxVar @@FileCmdErrMsg = ^<$FILE_COMMAND_ALLOWED>^


;----------------------------------------------------------------------------
;--- Constants to place into VBS --------------------------------------------
;----------------------------------------------------------------------------
#( '<?NewLine>'
   #define FileVbsVariables

   ;--- Next file sequence number is calculated (;0 = Never used (no last)) ---
   #if  [<$TABLES_FILE_SEQ_NUMBER_LIMIT> = 4]
        #define @@CastSeq   clng({_$Expression})
   #elseif
        #define @@CastSeq   {_$Expression}      ;;No need to do anything for integers
   #endif
   dim @@FileLastSeqNumber          : @@FileLastSeqNumber          = <$@@CastSeq Expression="0">  ;;Keeps track of sequence numbers used by "file(s)" & "MergeModule" commands
   dim @@RecordedFirstFileSeqNumber : @@RecordedFirstFileSeqNumber = false                        ;;Use by "file(s)" command (not "MergeModule")

   ;--- Use on "FILE" macro (Attributes column) -----------------------------
   const msidbFileAttributesReadOnly            = &H000001
   const msidbFileAttributesHidden              = &H000002
   const msidbFileAttributesSystem              = &H000004
   const msidbFileAttributesVital               = &H000200
   const msidbFileAttributesChecksum            = &H000400
   const msidbFileAttributesPatchAdded          = &H001000
   const msidbFileAttributesNoncompressed       = &H002000
   const msidbFileAttributesCompressed          = &H004000

   ;--- Some variables ------------------------------------------------------
   public CurrentFileKey, CurrentFileVersion,  CurrentFile, CurrentFileNameSL

   ;--- Used for the file command's "SELFREF" parameter ---------------------
   dim SelfRegNeeded
   dim oCancelSelfReg : set oCancelSelfReg = MkObject("Scripting.Dictionary")
#)



;----------------------------------------------------------------------------
;--- Required Functions -----------------------------------------------------
;----------------------------------------------------------------------------
#( '<?NewLine>'
   #define FileVbsFunctions

;**    [CommentBlockStart     (18 July 2006 18:59:34, Dennis)
;**+----------------------------------------------------------------------
;**|   <?NewLine>
;**|   '=========================================================================
;**|   function FileNextSeqNumb()       'Only used for MAKEMSI "File" command
;**|   '=========================================================================
;**|       ;--- Allocate a sequence number for the current file -----------------
;**|       FileNextSeqNumb = FileSeqNumb(1)
;**|
;**|       ;--- Record the sequence number of the first file (always 1 if no merge modules) ---
;**|       if   not @@RecordedFirstFileSeqNumber then
;**|            ;--- Store the info in a file (needed in next pass) -------------
;**|            @@RecordedFirstFileSeqNumber = true
;**|            on error resume next
;**|            dim SeqFile : SeqFile = "<$MSI_NAME_OF_FILE_FIRST_SEQUENCE_FILE>"
;**|            dim oStream : set oStream = oFS.CreateTextFile(SeqFile, true)
;**|            VbsCheck "Could not create the FILE SEQUENCE file """ & SeqFile & """"
;**|            oStream.writeLine(FileNextSeqNumb)
;**|            oStream.Close()
;**|            VbsCheck "Could not write to the FILE SEQUENCE file """ & SeqFile & """"
;**|       end if
;**|'FileNextSeqNumb = 0 'TMP DB$
;**|   end function
;**|
;**+----------------------------------------------------------------------
;**    CommentBlockEnd]       (18 July 2006 18:59:34, Dennis)
;**    [CommentBlockStart     (20 July 2006 19:32:48, Dennis)
;**+----------------------------------------------------------------------
;**|
;**|   <?NewLine>
;**|   '=========================================================================
;**|   function FileFirstFileSeqNumb()       ;;Only used for MAKEMSI "compile" process
;**|   '=========================================================================
;**|        on error resume next
;**|        dim SeqFile : SeqFile = "<$MSI_NAME_OF_FILE_FIRST_SEQUENCE_FILE>"
;**|        if  not oFS.FileExists(SeqFile) then
;**|            FileFirstFileSeqNumb = clng(1)
;**|        else
;**|            ;--- We have seen a "file(s)" command ---------------------------
;**|            dim oStream : set oStream = oFS.OpenTextFile(SeqFile, ForReading)
;**|            VbsCheck "Could not open the FILE SEQUENCE file """ & SeqFile & """ (created by the first ""FILE(s)"" command)."
;**|            dim FirstLine : FirstLine = oStream.ReadLine()
;**|            oStream.Close()
;**|            VbsCheck "Could not read the FILE SEQUENCE file """ & SeqFile & """"
;**|            FileFirstFileSeqNumb = clng(FirstLine)
;**|        end if
;**|   end function
;**|
;**|
;**|   <?NewLine>
;**|   '=========================================================================
;**|   function FileSeqNumb(ByVal AdjustAmt)
;**|   '=========================================================================
;**|       ;--- Adjust sequence number ------------------------------------------
;**|       @@FileLastSeqNumber = <$@@CastSeq Expression="@@FileLastSeqNumber + AdjustAmt">
;**|
;**|       ;--- Return the value ------------------------------------------------
;**|       FileSeqNumb = @@FileLastSeqNumber
;**|   end function
;**+----------------------------------------------------------------------
;**    CommentBlockEnd]       (20 July 2006 19:32:48, Dennis)
#)

;--- Map FILE ATTRIBUTES ----------------------------------------------------
#RexxVar @@FA_ReadOnly      = 'msidbFileAttributesReadOnly'
#RexxVar @@FA_Hidden        = 'msidbFileAttributesHidden'
#RexxVar @@FA_System        = 'msidbFileAttributesSystem'
#RexxVar @@FA_Vital         = 'msidbFileAttributesVital'
#RexxVar @@FA_Checksum      = 'msidbFileAttributesChecksum'
#RexxVar @@FA_PatchAdded    = 'msidbFileAttributesPatchAdded'
#RexxVar @@FA_Noncompressed = 'msidbFileAttributesNoncompressed'
#RexxVar @@FA_Compressed    = 'msidbFileAttributesCompressed'

;--- Map FILE ATTRIBUTES (which can be copied) ------------------------------
#RexxVar @@FAC_ReadOnly     = 'msidbFileAttributesReadOnly'
#RexxVar @@FAC_Hidden       = 'msidbFileAttributesHidden'
#RexxVar @@FAC_System       = 'msidbFileAttributesSystem'


;--- Used by FILEINFO.MMH ---------------------------------------------------
#define FILE_NUMBER_OF_FILES_IN_THE_HTML_REPORT  <??@@HtmlItemCnt>

;--- Build the "NOW" file date/time parameter information -------------------
#DefineRexx ''
    ;--- Get current file date and time in file DATE/TIME parameter format ---
    @@NowTS       = TimeStamp();
    @@EvenSeconds = substr(@@NowTs,13,2);
    if   @@EvenSeconds//2 = 1 then
    do
        ;--- The number is ODD (piece of MS crap "MAKEMCAB.EXE" won't allow this) ---
        @@EvenSeconds = @@EvenSeconds + 1
        if  @@EvenSeconds > 59 then
            @@EvenSeconds = 58
        if  @@EvenSeconds < 10 then
            @@EvenSeconds = "0" || @@EvenSeconds;
   end;
   @@NowTime = substr(@@NowTs,9,2) || ':' || substr(@@NowTs,11,2) || ':' || @@EvenSeconds;
   @@NowDate = substr(@@NowTs,1,4) || '-' || substr(@@NowTs,5,2)  || '-' || substr(@@NowTs,7,2);
#DefineRexx




;----------------------------------------------------------------------------
;--- ADD FILE -------------------------------------------------------------
;----------------------------------------------------------------------------
#( ''
   #define FILE
   <$UpdateMmLocation>
   {$!KEYWORDS}  ;;Don't Expect any keywords!

   ;--- Execute REXX code ---------------------------------------------------
   #evaluate ^^ ^<$Rexx4FILE {$?}>^
   <??@@Vbs2CreateDestDir><?RestartLine>
   <??@@Vbs2CreateComponent><?RestartLine>
   <??@@VbsF><?RestartLine>
   <??@@VbsFs><?RestartLine>
   <??@@VbsFh><?RestartLine>
   <??@@VbsKp><?RestartLine>
   <??@@VbsSr><?RestartLine>
   <??@@VbsPc><?RestartLine>        ;;Permissions related code
   <??@@Vbs2Remove><?RestartLine>


   ;--- Go back a level (if "Rexx4FILE" turned it on) -----------------------
   #if  ['<$DBG_ROW_PARMS>' <> 'N']
        #evaluate ^^ ^<$DBG_DEC>^
   #endif

   ;--- Parameter validation ------------------------------------------------
   {$!:#1,Source,Destination,8.3,KeyPath,Component,RowKey,Attributes,CopyAttributes,ExList,KeyCase,Hash,Version,Language,Comment,Feature,Remove,SelfReg,Doco,Access,Date,Time,Options4Component,OptionMakeRemoveDirs,Cabinet}
#)
#RexxVar RxFilesTotalProcessed = 0       ;;#files - Used by "MergeModule" command
#RexxVar @@HtmlItemCnt    = 0            ;;#items for the HTML report
#RexxVar @@TotalFileSize  = 0            ;;Total of all file sizes
#RexxVar @@SequenceNumber = 0
#RexxVar @@File1.0        = 1            ;;Stem used to add to exclusion list
#RexxVar @@SelfRegCnt     = 0            ;;Number of files self registered
#RexxVar @@FileTable  = 'File'
#DefineRexx 'Rexx4FILE'
   ;--- Initialization ------------------------------------------------------
   @@Vbs2CreateDestDir = ''
   RxFilesTotalProcessed    = RxFilesTotalProcessed + 1

   ;--- File command been disallowed? ---------------------------------------
   if   @@FileCmdErrMsg <> '' then
        error( ReplaceString(@@FileCmdErrMsg, '{NL}', '0A'x) );

   ;--- Get some parameters -------------------------------------------------
   @@KeyPath    = translate('{$KeyPath=^N^}');
   @@WantHash   = translate('{$Hash=^<$DEFAULT_FILE_WANT_FILEHASH>^}');
   {$Comment='' $$RxVar:@@Comment};
   if   @@Comment = '' then
        @@Comment = RxFileComment.RxFileCommentCnt;   ;;Any block comment?

   ;--- Get some Source information -----------------------------------------
   {$SOURCE      $$RxVAR:@@Source};          ;;Name of the source file
   @@FullSrc = FileQueryExists(@@Source);
;**    [CommentBlockStart     (19 July 2006 17:35:23, Dennis)
;**+----------------------------------------------------------------------
;**|   if  '{$RowKey=^^}' = '<$FILE_HTMLRPT_ROWKEY>' then
;**|   do
;**|       ;--- This is an entry for the YET to be created doco! ----------------
;**|       @@FullSrc  = @@Source;          ;;Only entry not to have the full source
;**|       @@FileSize = 0
;**|       @@FileTS   = TimeStamp();       ;;Use current time
;**|   end;
;**|   else
;**|   do
;**+----------------------------------------------------------------------
;**    CommentBlockEnd]       (19 July 2006 17:35:23, Dennis)

       ;--- Normal situation (not the generated doco file) ------------------
       if  @@FullSrc = '' then
           Error('The source file "' || @@Source || '" does not exist.');
       #if  ['<$DBG_ROW_PARMS>' <> 'N']
             <$DBG_SAY> '$File #' || RxFilesTotalProcessed || ': ' || @@FullSrc
             <$DBG_INC>
       #endif
       @@FileSize = FileQuerySize(@@FullSrc);
       @@FileTS   = GetFileTimeStamp(@@FullSrc, "D");

       ;--- Do we wish to add to an exclusion list? -------------------------
      if  '{$ExList=^^}' <> '' then
      do
          ;--- Add file to exclusion list! ----------------------------------
          @@File1.1 = @@FullSrc
          <$Rexx2AddFileStemToExludeList EXLIST=^{$EXLIST}^ FILESTEM="@@File1">
      end
;**    [CommentBlockStart     (19 July 2006 17:35:36, Dennis)
;**+----------------------------------------------------------------------
;**|   end;
;**+----------------------------------------------------------------------
;**    CommentBlockEnd]       (19 July 2006 17:35:36, Dennis)

   ;--- Work out the file's date and time -----------------------------------
   @@FileDate = '{$Date=^<$DEFAULT_FILE_DATE>^}';
   if   @@FileDate = '' then
   do
        ;--- Use the files date ---------------------------------------------
        @@FileDate = substr(@@FileTS,1,4) || '-' || substr(@@FileTS,5,2)  || '-' || substr(@@FileTS,7,2);
   end;
   else
   do
        ;--- Handle "now" Time ----------------------------------------------
        if  @@FileDate = "?" then
            @@FileDate = @@NowDate;

        ;--- Basic validation of passed date --------------------------------
        @@Invalid = ''
        if  length(@@FileDate) <> 10 then
            @@Invalid = 'It must be 10 characters long.'
        else
        do
            if  (substr(@@FileDate,5,1) || substr(@@FileDate,8,1)) <> "--" then
                @@Invalid = 'The "-" characters are misplaced.';
        end;
        if  @@Invalid <> '' then
            error('The passed file date of "' || @@FileDate || '" does not match the "YYYY-MM-DD" format!',, @@Invalid)
   end;
   @@FileTime = '{$Time=^<$DEFAULT_FILE_TIME>^}';
   if   @@FileTime = '' then
   do
       ;--- Use the files time ----------------------------------------------
       @@EvenSeconds = substr(@@FileTS,13,2);
       if   @@EvenSeconds//2 = 1 then
       do
            ;--- The number is ODD (piece of MS crap "MAKEMCAB.EXE" won't allow this) ---
            @@EvenSeconds = @@EvenSeconds + 1
            if  @@EvenSeconds > 59 then
                @@EvenSeconds = 58
            if  @@EvenSeconds < 10 then
                @@EvenSeconds = "0" || @@EvenSeconds;
       end;
       @@FileTime = substr(@@FileTS,9,2) || ':' || substr(@@FileTS,11,2) || ':' || @@EvenSeconds;
   end;
   else
   do
        ;--- Handle "now" Time ----------------------------------------------
        if  @@FileTime = "?" then
            @@FileTime = @@NowTime;

        ;--- Basic validation of passed time --------------------------------
        @@Invalid = ''
        if  length(@@FileTime) <> 8 then
            @@Invalid = 'It must be 8 characters long.'
        else
        do
            if  (substr(@@FileTime,3,1) || substr(@@FileTime,6,1)) <> "::" then
                @@Invalid = 'The ":" characters are misplaced.'
            else
            do
                @@EvenSeconds = substr(@@FileTime,7,2)
                if  datatype(@@EvenSeconds, 'W') = 0 then
                    @@Invalid = "The seconds are not numeric!"
                else
                do
                    if  @@EvenSeconds//2 = 1 then
                        @@Invalid = "The seconds are not even (Microsoft restriction)!"
                end;
            end;
        end;
        if  @@Invalid <> '' then
            error('The passed file time of "' || @@FileTime || '" does not match the "HH:MM:SS" format', 'or is otherwise invalid!',, @@Invalid)
   end;

   ;--- Create directory rows for the destination directory -----------------
   {$Destination=^^ $$RxVAR:@@Destination};
   @@DirKey = ''
   if  @@Destination = '' then
   do
       ;--- No destination info provided ------------------------------------
       @@DestSN = FilePart('N', @@Source);   ;;Same as source
   end;
   else
   do
       ;--- Want to rename file and possibly create directory/component -----
       if   right(@@Destination, 1) = '\' then
       do
            ;--- This means the user wants the same filename on the destination as the source ---
            @@DestDir = @@Destination;             ;;User only supplied the directory name!
            @@DestSN  = FilePart('N', @@Source);   ;;Same as source
       end;
       else
       do
            ;--- User supplied the file name (and possibly directory as well) ---
            @@DestDir = FilePart('L', @@Destination);
            @@DestSN  = FilePart('N', @@Destination);
       end
       if  @@DestDir <> '' then
       do
           ;--- Do have a directory -----------------------------------------
           @MrDir = translate('{$OptionMakeRemoveDirs=^<$DEFAULT_FILE_OPTION_MAKE_REMOVE_DIRECTORIES>^}')
           if   @MrDir == 'N' then
           do
                ;--- Don't want to MAKE/REMOVE directories ------------------
                <$Rexx4MakeDirectoryTree DirExp=^@@DestDir^>;
           end
           else
           do
                ;--- Need to MAKE/REMOVE directories ------------------------
                <$Rexx4MakeDirectoryTree DirExp=^@@DestDir^ MAKE="Y" REMOVE="Y">;
           end
           @@Vbs2CreateDestDir = DTVBS;
           @@DirKey            = DT_KEYNAME;
       end;
   end;
   @@DestExtn   = FilePart('EXTN', @@DestSN);


   ;--- Update Progress info ------------------------------------------------
   <$Rexx2SetProgressText ProgressExp=^'File #' || RxFilesTotalProcessed || ': ' || @@DestSN^>

   ;--- What should the row's key be? ---------------------------------------
   @@UserKey = '{$RowKey=^^}'          ;;Key into FILE table
   if  left(@@UserKey, 1) <> '?' then
       @@RowKeyRetVar = '';            ;;"caller" does not want to have rowkey value passed back
   else
   do
       ;--- User wants the row key information returned in the specified variable ---
       @@RowKeyRetVar = substr(@@UserKey, 2)  ;;Will be "" if "?" passed!
       @@UserKey      = ''                    ;;The user is not passing a rowkey (it was a query)
   end;
   if  @@UserKey <> '' then
   do
       ;--- User supplied a specific Row Key --------------------------------
       @@RowKey = @@UserKey;         ;;Used supplied name
       @@Memory = "FILEK_" || c2x(translate(@@RowKey));
       if  symbol(@@Memory) = "VAR" then
           CryAndDie('The file key "' || @@RowKey || '" was already used at ' || value(@@Memory));
       <$Rexx2CheckMsiId IdVar="@@RowKey" What="file rowkey">
   end;
   else
   do
       ;--- User doesn't care what the key is, use shortname ----------------
       @@RowKey = @@DestSN || RxGeneratedKeySuffix;

       ;--- Fix up the rowkey to ensure its a valid identifier --------------
       <$Rexx2FixMsiId IDVAR="@@RowKey">

       ;--- Limit the number of characters in the key? ----------------------
       @@Limit = <$DEFAULT_FILE_ROWKEY_MAXLNG>;
       if  @@Limit <> 0 then
       do
           ;--- User does wish to limit -------------------------------------
           if  length(@@RowKey) > @@Limit then
               @@RowKey = left(@@RowKey, @@Limit);
       end;

       ;--- Does user wish to adjust the file case? -------------------------
       @@Case = translate('{$KeyCase=^<$DEFAULT_FILE_ROWKEY_CASE>^}');
       if  @@Case = 'U' then @@RowKey = ToUpperCase(@@RowKey);
       if  @@Case = 'L' then @@RowKey = ToLowerCase(@@RowKey);

       ;--- Need to make sure key is valid ----------------------------------
       if  datatype(left(@@RowKey, 1), 'W') then
           @@RowKey = "_" || @@RowKey;

       ;--- Now adjust the RowKey if we have seen it before ---------------------
       @@AjustedRowKey = @@RowKey
       @@Memory        = "FILEK_" || c2x(translate(@@RowKey));
       @@Cnt           = 0;
       do  while symbol(@@Memory) = "VAR"
           ;--- Now increment the key -------------------------------------------
           @@Cnt           = @@Cnt + 1;
           @@AjustedRowKey = @@RowKey || '_' || @@Cnt;
           @@Memory        = "FILEK_" || c2x(translate(@@AjustedRowKey));
       end;
       @@RowKey = @@AjustedRowKey
   end;

   ;--- If required set access permissions ----------------------------------
   @@Access = '{$Access=^<$DEFAULT_FILE_ACCESS>^}';
   if   @@Access = '' then
        @@VbsPc = ''
   else
   do
        ;--- User wants to adjust permissions -------------------------------
        <$RexxToSetAccess AliasVar="@@Access" TableVar="@@FileTable" KeyVar="@@RowKey" ResultVar="@@VbsPc">
   end;

   ;--- Need to remember that we have used this row key ---------------------
   call value @@Memory, GetInputFileNameAndLine()

   ;--- File for what component? --------------------------------------------
   if  '{$Component='' $$IsPassed}' = 'Y' then
       @@Component = '{$Component}';       ;;User supplied a value
   else
   do
       ;--- Get "current component (its OK for there to be none) ------------
       @@Component = RxComponent.RxComponentNestingLevel;
   end;

   ;--- Want to create components? ------------------------------------------
   @@Vbs2CreateComponent = '';
   if  @@Component <> '' then
   do
       ;--- Component name was passed (not making it) -----------------------
       if  @@DirKey <> '' then
           <$RxDieAsDestinationDirNotRequiredForFileCmd DestDirExp="@@DestDir" ComponentExp="@@Component">;
   end;
   else
   do
       ;--- To create a component we must have a "directory key" ------------
       if  @@DirKey = '' then
           error("We can't create a component for the file unless we know the destination", "directory!");

       ;--- Allow user to specify the feature for the component -------------
       if  '{$Feature=^^ $$IsPassed}' = 'N' then
           @@Feature = RxCurrentFeature.RxFeatureNestingLevel
       else
       do
           ;--- Value has been passed ---------------------------------------
           {$Feature $$RxVar:@@Feature}
           <$Rexx2ResolveFeatureName FeatVar="@@Feature">
       end;
       if  @@Feature = '' then
           error('To create components we must know for which feature!')

       ;--- We are about to create a component, set up prefix (if required) ---
       if   @@CpPrefix = '' then
       do
            ;--- Init prefix in case its required ---------------------------
            @@CpPrefix = '<$FILE_GENERATED_COMPONENT_PREFIX>';  ;;We won't do anything if empty. User should set "FILE_GENERATED_COMPONENT_MAX_LENGTH" to 40 to play safe.
            if @@CpPrefix <> '' then
            do
                ;--- User does want a unique prefix -------------------------
                @@CpCnt    = @@CpCnt + 1;                       ;;Generate unique number
                @@CpPrefix = @@CpPrefix || @@CpCnt || '.';      ;;Set up prefix to help ensure its unique
            end;
       end;

       ;--- What is the name of the component we are creating? --------------
       @@ExtnList = ';<$FILE_EXTENSIONS_WHICH_NEED_OWN_COMPONENT>;';
       if   @@ExtnList = ';*;' then
            @@OwnC = 1;                         ;;All files go into their own component
       else
       do
            ;--- See if this extension needs its own component --------------
            @@Look4 = ';.' || translate(@@DestExtn) || ';';
            @@OwnC  = pos(@@Look4, translate(@@ExtnList)) <> 0
       end;
       @@FeatureId = GetId('@@Feature_', 'MAXCHARS', @@Feature, '_.', 15);  ;;Don't want it to be too long...
       @@Component = @@FeatureId || '.'
       if   @@OwnC then
       do
           ;--- This file needs its own component ---------------------------
           @@Component  = @@Component || @@DirKey || '_1_' || @@RowKey || RxGeneratedKeySuffix;
           @@Component  = GetId('@@Component_', 'MAXCHARS', @@Component, '_.', <$FILE_GENERATED_COMPONENT_MAX_LENGTH>);
           @@MustCreate = 'Y';
       end;
       else
       do
           ;--- This can share a component (create first time) --------------
           @@Component  = @@Component || @@DirKey || '_x' || RxGeneratedKeySuffix;
           @@Component  = GetId('@@Component_', 'MAXCHARS', @@Component, '_.', <$FILE_GENERATED_COMPONENT_MAX_LENGTH>);
           @@CreatedKey = '@@CC_' || c2x(@@Component);
           if  symbol(@@CreatedKey) = 'VAR' then
               @@MustCreate = 'N';
           else
           do
               ;--- First time, we need to create it ------------------------
               @@MustCreate = 'Y';
               call value @@CreatedKey, ''
           end;
       end;

       ;--- Create VBS to create the component ------------------------------
       if  @@MustCreate = 'Y' then
       do
           ;--- Create component, the current file will be the keypath ------
           @@KeyPath  = '<$FILE_GENERATED_COMPONENT_USE_FILE_AS_KEYPATH>';   ;;This value will almost always be "Y"
           {$Options4Component=^<$DEFAULT_FILE_OPTIONS4COMPONENT>^ $$RxVar:@@CompOpt}  ;;Any component options
            if  @@CompOpt <> '' then
                @@CompOpt = ' ' || @@CompOpt
           @@Vbs2CreateComponent = '<' || '$Component CREATE=^Y^ "' || @@Component || '" Directory_=' || Quoted(@@DirKey) || ' Feature=^' || @@Feature || '^' || @@CompOpt || '><' || '$/Component>'
       end;
   end;

   ;--- Set global variables to update "current file" info ------------------
   @@VbsF =           'CurrentFile="'    || @@FullSrc || '"<?NewLine>'
   @@VbsF = @@VbsF || 'CurrentFileKey="' || @@RowKey  || '"<?NewLine>'

   ;--- User specify an 8.3 name? -------------------------------------------
   if  '{$8.3='' $$IsPassed}' = 'Y' then
       @@VbsF = @@VbsF || 'CurrentFileNameSL="{$8.3}|' || @@DestSN || '"<?NewLine>'
   else
   do
       ;--- Get 8.3 name from the source file -------------------------------
       @@VbsF = @@VbsF || 'CurrentFileNameSL=Get83PlusLongName("' || @@DestSN || '")<?NewLine>'
   end;

   ;--- Remove the file? ----------------------------------------------------
   @@Vbs2Remove = ""
   if   translate('{$Remove=^<$DEFAULT_FILE_REMOVE>^}') = 'Y' then
   do
        ;--- Want to remove file on install ---------------------------------
        if  @@DirKey <> '' then
            @@CompDir = @@DirKey;       ;;We know the value!
        else
        do
            ;--- We don't know the directory key, get it given component name ---
            @@K = "Comp2DirKey." || @@Component;
            if   symbol(@@K) = 'VAR' then;
                 @@CompDir = value(@@K);
            else
                 error('Could not determine the directory used on component "' || @@Component || '"', 'This is required to process the REMOVE parameter.');
        end
        @@Vbs2Remove = '<' || '$RemoveFile "<?x22>&CurrentFileNameSL&<?x22>" DIR=^' || @@CompDir || '^ Component=^' || @@Component || '^ MODE=^INSTALL^ RowKey=^' || @@RowKey || '^>'
        ; say '++> ' || @@Vbs2Remove
   end;

   ;--- User pass a version # or perhaps "companion file key"? --------------
   if  '{$Version='' $$IsPassed}' = 'Y' then
       ;--- User passed the information -------------------------------------
       @@VbsF = @@VbsF || 'CurrentFileVersion="{$Version}"<?NewLine>'
   else
   do
       ;--- Get the version number of the file (into VBS variable) ----------
       @@VbsF = @@VbsF || '@@FileVersion("<$FILE_VERSION_FOR_UNVERSIONED_FILES>")<?NewLine>'
   end;

   ;--- User pass a version # or perhaps "companion file key"? --------------
   if  '{$Language='' $$IsPassed}' = 'Y' then
       ;--- User passed the information -------------------------------------
       @@FileLangCol = ' Language="{$Language}"';
   else
   do
       ;--- Get the Language number of the file (into VBS variable) ----------
       @@FileLangCol = ' *Language=`FileLanguage()`';
   end;

   ;--- Handle attributes ---------------------------------------------------
   <$MapBits ResultVar=^@@Attributes^      RxMapVarName=^@@FA_^  BitList=^{$Attributes="<$DEFAULT_FILE_ATTRIBUTES>"}^ What=^file attribute^>
   <$MapBits ResultVar=^@@CopyAttributes^  RxMapVarName=^@@FAC_^ BitList=^{$CopyAttributes="<$DEFAULT_FILE_ATTRIBUTES_TO_COPY>"}^ What=^file copy attribute^>
   @@AttrVbs = 'FileAttribs(' || @@Attributes || ', ' || @@CopyAttributes || ')'

   ;--- Start FILE TABLE ------------------------------------------------
   @@VbsF = @@VbsF || '<' || '$Table "File">'

   ;--- Create the row ------------------------------------------------------
   @@SequenceNumber = @@SequenceNumber + 1
   @@VbsF = @@VbsF || '<' || '$Row'
   @@VbsF = @@VbsF || ' *File="CurrentFileKey"'
   @@VbsF = @@VbsF || ' Component_="'   || @@Component           || '"'
   @@VbsF = @@VbsF || ' *FileName="CurrentFileNameSL"'
   @@VbsF = @@VbsF || ' FileSize="'     || @@FileSize            || '"'
   @@VbsF = @@VbsF || ' *Version="CurrentFileVersion"';
   @@VbsF = @@VbsF || ' Attributes="'   || @@AttrVbs             || '"'
   @@VbsF = @@VbsF || @@FileLangCol;
   @@VbsF = @@VbsF || ' Sequence="0"'                          ;;Compile process will update
   @@VbsF = @@VbsF || ' @Validate="NEW -MISSINGDATA -Sequence:UNDERFLOW"'   ;;Really want to know if we ever duplicate one!
   @@VbsF = @@VbsF || '>'

   ;--- End table -----------------------------------------------------------
   @@VbsF = @@VbsF || '<' || '$/Table>'

   ;--- Now we need to remember the file source -----------------------------
   @@Cabinet = "{$Cabinet=^^}"
   if   @@Cabinet <> "" then
   do
        <$RxCabinetMustPreExist "@@Cabinet">
   end
   else
   do
        ;--- Work out what to use based on nesting (or DEFAULT) -------------
        @@Cabinet = RxCabinetAlias.RxCabinetNestingLevel

        ;--- If we defaulted to the DEFAULT cabinet type then see if extension based alternative ---
        if  @@Cabinet = '<$CABINET_ALIAS_DEFAULT>' then
        do
            ;--- See if we have an extension based cabinet? ---------------------
            @@L4 = "_CABINET_DEFAULT_FOR_EXTN_" || @@DestExtn;
            if  defined(@@L4) = 'Y' then
                @@Cabinet = MacroGet(@@L4);
        end;
   end;
   @@VbsFs = ""
   @@VbsFs = @@VbsFs || '<' || '$Table "<$MAKEMSI_TABLENAME_FILESOURCE>">'
   @@VbsFs = @@VbsFs ||    '<' || '$Row'
   @@VbsFs = @@VbsFs ||      ' *File_="CurrentFileKey"'
   @@VbsFs = @@VbsFs ||      ' *SourceFile="CurrentFile"'
   @@VbsFs = @@VbsFs ||      ' Date="' || @@FileDate || '"'
   @@VbsFs = @@VbsFs ||      ' Time="' || @@FileTime || '"'
   @@VbsFs = @@VbsFs ||      ' CabinetAlias="' || @@Cabinet || '"'
   @@VbsFs = @@VbsFs ||      ' @Validate="NEW -MISSINGDATA"'      ;;Really want to know if we ever duplicate one!
   @@VbsFs = @@VbsFs ||    '>'
   @@VbsFs = @@VbsFs || '<' || '$/Table>'

   ;--- Do we wish to store an MD5 hash? ------------------------------------
   @@VbsFh = ""
   #ifndef FILE_DISABLE_MD5_GENERATION_ALTOGETHER
       ;--- We never create a hash for the MSI doco! ------------------------ ;;Why not????????????? Forgot....
       if  @@RowKey <> '<$FILE_HTMLRPT_ROWKEY>' then
       do
           ;--- Always create a hash so it goes into the HTML report --------
           @@VbsFh = '@@FileHash("' || translate(@@WantHash) || '")<?NewLine>';
       end;
   #endif

   ;--- Want this file to be the keypath of the component? ------------------
   @@VbsKp = '';
   if  @@KeyPath  = 'Y' then
   do
       ;--- This key is a File Keypath --------------------------------------
       @@VbsKp = @@VbsKp || '<' || '$Table "Component">'
       @@VbsKp = @@VbsKp || '<' ||    "$Row @Where=^`Component` = '" || @@Component || "'^"
       @@VbsKp = @@VbsKp ||           " @SelfRef=^{*}^"
       @@VbsKp = @@VbsKp ||           " @OK=^=1^"
       @@VbsKp = @@VbsKp ||           " Attributes=^({*} AND NOT msidbComponentAttributesRegistryKeyPath)^"
       @@VbsKp = @@VbsKp ||           " KeyPath=^" || @@RowKey || "^"
       @@VbsKp = @@VbsKp || '>'
       @@VbsKp = @@VbsKp || '<' || "$/Table>"
   end;

   ;--- Self register? (Y=Always, N=Never, "?"=If can be done) --------------
   @@VbsSr = ''
   @@SelfReg = translate('{$SelfReg=^<$DEFAULT_FILE_SELFREGISTER>^}');
   if  @@SelfReg <> '' & @@SelfReg <> 'N' then
   do
       ;--- "?" means maybe... ----------------------------------------------
       if  @@SelfReg <> '?' then
       do
           ;--- Always want to self register --------------------------------
           @@VbsSr = @@VbsSr || '<' || '$SelfRegister "' || @@RowKey || '"'
           if   @@SelfReg <> 'Y' then
           do
                ;--- User is providing ordering information -----------------
                @@VbsSr = @@VbsSr || ' ORDER=^' || @@SelfReg || '^';
           end;
           @@VbsSr = @@VbsSr || '><?NewLine>'
       end;
       else
       do
           ;--- Automatic self registration (do if possible) ----------------
           @@ExtnList = ';<$FILE_EXTENSIONS_WHICH_MAY_SELF_REGISTER>;';
           if   @@ExtnList = ';*;' then
                @@SelfRegIfPoss = 1;               ;;Want to TRY all files (maybe slow...)
           else
           do
                ;--- In our list of ones to try? ----------------------------
                @@Look4 = ';.' || translate(@@DestExtn) || ';';
                @@SelfRegIfPoss  = pos(@@Look4, translate(@@ExtnList)) <> 0
           end;
           if   @@SelfRegIfPoss then
           do
                ;--- We will try this one (create tools object if required) ---
                @@SelfRegCnt = @@SelfRegCnt + 1;
                @@VbsSr = @@VbsSr || 'SelfRegNeeded = HasDllRegisterServer(CurrentFile)<?NewLine>'
                @@VbsSr = @@VbsSr || 'if SelfRegNeeded = "" then<?NewLine>'
                @@VbsSr = @@VbsSr || '   <' || '$SelfRegister "' || @@RowKey || '"><?NewLine>'        ;;NOTE1: SELF REGISTRATION IS NO LONGER DONE INLINE (you won't see it here in VBS)
                @@VbsSr = @@VbsSr || 'else<?NewLine>'
                    ;--- No need to register so cancel the request we just queued a few lines above ---
                    @@VbsSr = @@VbsSr || '   oCancelSelfReg.add "' || @@RowKey || '", ""<?NewLine>'   ;;NOTE2: Cancelled (see NOTE1)

                    ;--- If user wants to see no-need for registration messages then add it ---
                    if '<$FILE_AUTOMATIC_SELF_REGISTRATION_RECORD_NO>' <> 'N' then
                    do
                       ;--- Record that we decided we did not need to do it -----
                       @@VbsSr = @@VbsSr || '   VbsReturnMacro "<$SELFREG_P1RET_PREFIX>.' || @@RowKey || '", SelfRegNeeded<?NewLine>'
                    end
                @@VbsSr = @@VbsSr || 'end if<?NewLine>'
           end;
       end;
   end;

   ;--- Now return the rowkey value to the "caller" if requested ------------
   if  @@RowKeyRetVar <> '' then
       call value @@RowKeyRetVar, @@RowKey;

   ;--- Save details if user supplied a row key OR we are asking for its value ---
   if  @@RowKeyRetVar <> '' | @@UserKey <> '' then
   do
       @@FiPrefix = '_' || c2x(@@RowKey) || '_FI_'
       call value @@FiPrefix || 'COMPONENT', @@Component;
       call value @@FiPrefix || 'Dst83',     @@DestSN;
       call value @@FiPrefix || 'SrcFile',   @@FullSrc;
       call value @@FiPrefix || 'SrcTS',     @@FileTS;
       call value @@FiPrefix || 'FileSize',  @@FileSize;
   end;

   ;--- Add to FILE report --------------------------------------------------
   if  '{$Doco='<$DEFAULT_FILE_DOCO>'}' <> 'N' then
   do
       ;--- User wants this in the doco -------------------------------------
       @@InstallTs = substr(@@FileDate,1,4) || substr(@@FileDate,6,2) || substr(@@FileDate,9,2) || substr(@@FileTime,1,2) || substr(@@FileTime,4,2) || substr(@@FileTime,7,2)
       @@SortKey = @@FileTS || 'FF'x || @@RowKey;
       @@All     = @@SortKey || '00'x || @@FullSrc || '00'x || @@DestSN || '00'x || @@Component || '00'x || @@FileSize || '00'x || @@FileTS || '00'x || @@InstallTs || '00'x  || @@RowKey || '00'x || @@Comment || '00'x || RxMmLocation;
       @@HtmlItemCnt            = @@HtmlItemCnt + 1;
       @@HtmlItem.@@HtmlItemCnt = @@All;
       @@HtmlItem.0             = @@HtmlItemCnt;
   end;
#DefineRexx
#DefineRexx 'RxDieAsDestinationDirNotRequiredForFileCmd'
    ;Error('A destination directory of "' || {$DestDirExp} || '" was passed however', 'a component is not being created!');
    #(
        Error('A destination directory of "' || {$DestDirExp} || '" was passed however',
              'a component is not being created for the file!',
              ,
              'The file was being added to the "' || {$ComponentExp} || '" component and',
              'has therefore already been allocated a directory...',
             );
    #)
#DefineRexx






;----------------------------------------------------------------------------
;--- The button on the top --------------------------------------------------
;----------------------------------------------------------------------------
#define? FILE_BEFORE_BUTTON
#define? FILE_AFTER_BUTTON
#(
   #define? FILE_BUTTON

   ;--- Generate buttons ----------------------------------------------------
   <$FILE_BEFORE_BUTTON>
   <$BUTTON2 "FILES" Text="Files" CNT="@@HtmlItemCnt">
   <$FILE_AFTER_BUTTON>
#)

;----------------------------------------------------------------------------
;--- How to generate the report ---------------------------------------------
;----------------------------------------------------------------------------
#define? FILE_BEFORE_REPORT
#define? FILE_AFTER_REPORT
#( ''
   #define? FILE_REPORT

   ;--- BEFORE --------------------------------------------------------------
   <$FILE_BEFORE_REPORT>

   ;--- Generate Environment report -----------------------------------------
   <A NAME="FILES"></A>
   #if [@@HtmlItemCnt = 0]
       <$FILE_HTML_NO_ENTRIES>
   #elseif
      ;--- Start the HTML table ---------------------------------------------
      #RexxVar @@ProgressText = 'Making FILE related HTML'
      <$HTMLRPT_HEADING TEXT="Files">
      <$FILE_HTML_REPORT_START>

      ;--- Prepare ----------------------------------------------------------
      #DefineRexx '' NOPACK
           ;--- Sort file table entries -------------------------------------
           call ArraySort    '@@HtmlItem';
           call ArrayReverse '@@HtmlItem';
      #DefineRexx

      ;--- Generate guts of report ------------------------------------------
      #{  FOR @@Index = 1 to @@HtmlItemCnt
           ;--- Split off components ----------------------------------------
           #evaluate ^^ ^<$Rexx2GenerateVariousFileInformationForHtmlReport>^

           ;--- Generate the HTML for this file -----------------------------
           <$FILE_HTML_REPORT_ROW>
      #}

      ;--- End the HTML table -----------------------------------------------
      <$FILE_HTML_REPORT_END>

       ;--- Verify code -----------------------------------------------------
       #ifndef FILE_HTMLRPT_NO_VERIFY_BUTTON
           <$FILE_HTML_VERIFICATION_CODE>
       #endif
   #endif

   ;--- AFTER ---------------------------------------------------------------
   <$FILE_AFTER_REPORT>
#)
#define? FILE_GENERATE_VARIOUS_INFOMATION_HOOK_START
#DefineRexx 'Rexx2GenerateVariousFileInformationForHtmlReport' NOPACK
   ;--- Generates HTML faster (and in a "linear" manner) --------------------
   if   (@@Index // 10) = 0 then         ;;Every 10 files
   do
        ;--- Don't call too often, seems to slow things too much ------------
        call FlushQueuedOutput;
   end;

   ;--- Update progress if required -----------------------------------------
   <$Rexx2SetProgressText ProgressExp=^'HTML: File ' || @@Index || '/' || @@HtmlItemCnt^>
   <$Rexx2ShowProgress>

   ;--- Extract the bits we stored earlier ----------------------------------
   parse var @@HtmlItem.@@Index . '00'x @@FullSrc '00'x @@DestSN '00'x @@Component '00'x @@FileSize '00'x @@FileTS '00'x @@InstallTs '00'x @@RowKey '00'x @@Comment '00'x @@MmLocation;

   ;--- User Hook -----------------------------------------------------------
   <$FILE_GENERATE_VARIOUS_INFOMATION_HOOK_START>

   ;--- Get some information ------------------------------------------------
   @@DestBaseNE = FilePart('B', @@DestSN);
   @@FileTimeS  = FormatTime('<$HTMLRPT_DATETIME_FORMAT>', @@FileTS);
   @@FileTimeI  = FormatTime('<$HTMLRPT_DATETIME_FORMAT>', @@InstallTS);
   @@TotalFileSize = @@TotalFileSize + @@FileSize;
   @@FileSizeCma   = AddCommasToDecimalNumber(@@FileSize);

   ;--- IS the installed time equal to the source file? ---------------------
   if   @@FileTimeS = @@FileTimeI then
        @@FileTimeComment = ""
   else
   do
        ;--- User can adjust the comment ------------------------------------
        ;@@FileTimeComment = MacroGet("FILE_HTMLRPT_INSTALLTIME_COMMENT_HTML");
        @@FileTimeComment = ReplaceString(@@DateStar, "{?}", @@FileTimeI);
   end;

   ;--- See if we have a key for this value ---------------------------------
   @@K = "Comp2DirKey." || @@Component;
   if   symbol(@@K) = 'VAR' then;
       @@DestDirKey = value(@@K);
   else;
       @@DestDirKey = "?";            ;;Bug?

   ;--- Get some information returned from pass 1 of the VB -----------------
   @@L4 = 'VBSRET.FileHash.' || @@RowKey;
   if  defined(@@L4) = 'N' then;
       @@Hash = '';
   else;
       @@Hash = MacroGet(@@L4);
   @@L4 = 'VBSRET.FileHRS.' || @@RowKey;   ;;File's Attributes
   if  defined(@@L4) = 'N' then;
       @@AttribDec = 0;
   else
       @@AttribDec = MacroGet(@@L4);
   if  @@AttribDec = 0 then;
       @@AttrHRS  = '';
   else
   do
       ;--- At least one of these attributes is set -------------------------
       @@AttrBits  = d2c(@@AttribDec);
       if '00'x = bitand(d2c(2), @@AttrBits) then;
           @@AttrHRS = "<$FILE_VERIFY_ATTRIBUTE_RESET.H>";
       else;
           @@AttrHRS = "<$FILE_VERIFY_ATTRIBUTE_SET.H>";
       if '00'x = bitand(d2c(1), @@AttrBits) then;
           @@AttrHRS = @@AttrHRS || "<$FILE_VERIFY_ATTRIBUTE_RESET.R>";
       else;
           @@AttrHRS = @@AttrHRS || "<$FILE_VERIFY_ATTRIBUTE_SET.R>";
       if '00'x = bitand(d2c(4), @@AttrBits) then;
           @@AttrHRS = @@AttrHRS || "<$FILE_VERIFY_ATTRIBUTE_RESET.S>";
       else;
           @@AttrHRS = @@AttrHRS || "<$FILE_VERIFY_ATTRIBUTE_SET.S>";
   end;
   @@L4 = 'VBSRET.SelfRegister.' || @@RowKey;
   if  defined(@@L4) = 'N' then;
       @@SelfRegState= '';
   else;
       @@SelfRegState= MacroGet(@@L4);
   @@L4 = 'VBSRET.FileVersion.' || @@RowKey;
   if  defined(@@L4) = 'N' then;
       @@FileVer = '';
   else;
       @@FileVer = MacroGet(@@L4);
   @@L4 = 'VBSRET.FileLanguage.' || @@RowKey;
   if  defined(@@L4) = 'N' then;
       @@FileLang = '';
   else;
       @@FileLang = MacroGet(@@L4);

   ;--- Expand Keys if possible ---------------------------------------------
   @@UserDestDir = '[' || @@DestDirKey  || ']'
   do  while left(@@UserDestDir,1) = '['
       ;--- Split up --------------------------------------------------------
       parse var @@UserDestDir '[' @@DirKey ']' @@Rest;

       @@Key = 'DT_KEY2USER_' || c2x(translate(@@DirKey));
       if  symbol(@@Key) = 'VAR' then
           @@UserDestDir = value(@@Key) || @@Rest
       else
       do
           ;--- FAILED! ---------------------------------------------------------
           @@UserDestDir = "[" || @@DirKey || ']' || @@Rest
           leave;
       end;
   end;

   ;--- Dir bits might contain "8.3|long" components ------------------------
   @@T = @@UserDestDir || '~';
   @@A = ''
   do while @@T \== ''
       parse var @@T @@BS '\' @@T

       @@PipeAt = pos('|', @@BS);
       if @@PipeAt <> 0 then
          @@BS = substr(@@BS, @@PipeAt+1)
       if @@A \== '' then
          @@A = @@A || '\';
       @@A = @@A || @@BS
   end;
   @@UserDestDir = left(@@A, length(@@A)-1);        ;;Remove '~'

   ;--- Remove any 8.3 part -------------------------------------------------
   @@PipePos = Pos('|', @@DestSN);
   if   @@PipePos = 0 then
        @@DestSNLong = @@DestSN;                        ;;No 8.3 attached
   else
        @@DestSNLong = substr(@@DestSN, @@PipePos+1);   ;;Want long name part only

   ;--- Set up for "Verify" button ------------------------------------------
   @@VerDestFile                                    = @@UserDestDir || '\' || @@DestSNLong;
   @@VerifyArraySetupCmdsCnt                        = @@VerifyArraySetupCmdsCnt + 1
   @@VerifyArraySetupCmds.@@VerifyArraySetupCmdsCnt = 'Add2VerifyList "' || @@VerDestFile || '", "' || @@FileSize || '", "' || @@InstallTS || '", "' || @@FileVer || '", "' || @@Hash || '", ' ||  @@AttribDec || ', "' || @@Component || '"<?NewLine>';

   ;--- Get GUID for component ----------------------------------------------
   @@ComponentGuid = MacroGet('VBSRET.CompGuid.' || @@Component);

   ;--- Remember guid for this component ------------------------------------
   @@K = "oComp2Guid_" || c2x(@@Component);
   if   symbol(@@K) <> 'VAR' then
   do
       @@VerifyComponent2GuidMapping = @@VerifyComponent2GuidMapping || 'oComp2Guid.add "' || @@Component || '", "' || @@ComponentGuid || '"<?NewLine>'
       call value @@K, "";             ;;Done it
   end;

   ;--- Did  we get passed a comment when the file was added? ---------------
   if  @@Comment = '' then
   do
       ;--- Try to get a comment using the full source name -----------------
       <$Rexx2GetFileComment KeyVar='@@FullSrc' CmtVar='@@Comment'>

       ;--- Try using the destination file name -----------------------------
       if  @@Comment = '' then
       do
           @@Try = '[' || @@DestDirKey || ']\' || @@DestSN;
           <$Rexx2GetFileComment KeyVar='@@Try' CmtVar='@@Comment'>
       end;

       ;--- Try using the destination base name (base+extn) -----------------
       if  @@Comment = '' then
       do
           <$Rexx2GetFileComment KeyVar='@@DestSN' CmtVar='@@Comment'>
       end;

       ;--- Try using the destination files extension -----------------------
       if  @@Comment = '' then
       do
           @@Try = '.' || @@DestExtn;
           <$Rexx2GetFileComment KeyVar='@@Try' CmtVar='@@Comment'>
       end;
   end;

   ;--- Get any STRFINFO ----------------------------------------------------
   <$FileInfoRexx2ExtractDocumentProperties FileVar="@@FullSrc" SfiVar="@@SFI">

   ;--- Adjust some items ---------------------------------------------------
   @@FullSrc    = wbr(@@FullSrc);
   @@DestBaseNE = wbr(@@DestBaseNE);
   @@DestExtn   = wbr(@@DestExtn,,,,<$FILE_HTMLRPT_MAX_EXTENSION_WIDTH>);

   ;--- Allow user to combine some of the details for the report ------------
   <$FILE_COMBINE_SOME_DETAILS>;

   ;--- Make sure these values are not empty --------------------------------
   if  @@Comment  = '' then @@Comment  = '&nbsp;';
   if  @@DestExtn = '' then @@DestExtn = '&nbsp;';
#DefineRexx
#ifndef     FILE_COMBINE_SOME_DETAILS
   #define? FILE_COMBINE_SOME_DETAILS_USER_HOOK_START
   #define? FILE_COMBINE_SOME_DETAILS_USER_HOOK_BEFORE_STRINGFILE_DETAILS_ADDED
   #define? FILE_COMBINE_SOME_DETAILS_USER_HOOK_AFTER_STRINGFILE_DETAILS_ADDED
   #define? FILE_COMBINE_SOME_DETAILS_USER_HOOK_END
   #define  FILE_PREFIX @@                      ;;You may need to refer to this to access variables in hooks!
   #DefineRexx 'FILE_COMBINE_SOME_DETAILS'
       ;--- User Hook -------------------------------------------------------
       <$FILE_COMBINE_SOME_DETAILS_USER_HOOK_START>

       ;--- Start with component details ------------------------------------
       @@CommentCol = '<div class="FileCmtPlus">';
       @@Hr    = '<$FILE_HTMLRPT_HR>'
       @@CommentCol = @@CommentCol || ' <span title="GUID: ' || @@ComponentGuid || '"><span class="FileCmtName">Component</span> <span class="FileCmtValue">' || Wbr(@@Component) || '</span></span>';

       ;--- Some other items which may or may not be available --------------
       if  @@Hash <> '' then       ;;MD5
           @@CommentCol = @@CommentCol || ' <span class="FileCmtName">MD5</span> <span class="FileCmtValue">' || @@Hash || '</span>';
       if  @@FileTimeS <> @@FileTimeI then       ;;Install date differs?
           @@CommentCol = @@CommentCol || ' <span class="FileCmtName">Install Time</span> <span class="FileCmtValue">' || @@FileTimeI || '</span>';
       if  @@FileVer <> '' then    ;;Version
           @@CommentCol = @@CommentCol || ' <span class="FileCmtName">Version</span> <span class="FileCmtValue">' || @@FileVer || '</span>';
       if  @@AttrHRS <> '' then    ;;Version
           @@CommentCol = @@CommentCol || ' <span class="FileCmtName">Attributes</span> <span class="FileCmtValue">' || @@AttrHRS || '</span>';
       if  @@SelfRegState <> "" then
           @@CommentCol = @@CommentCol || ' <span class="FileCmtName">Self Registration</span> <span class="FileCmtValue">' || @@SelfRegState || '</span>';
       @@CommentCol = @@CommentCol || '</div>'

       ;--- Add any File Comment --------------------------------------------
       if   @@Comment <> "" then
            @@CommentCol = @@CommentCol || @@Hr || @@Comment

       ;--- Any file information captured from "StringFileInfo"? ------------
       <$FILE_COMBINE_SOME_DETAILS_USER_HOOK_BEFORE_STRINGFILE_DETAILS_ADDED>
       if  @@SFI <> '' then
           @@CommentCol = @@CommentCol || @@Hr || '<span class="FileCmtSFI" title="Document properties">' || @@SFI || '</span>'
       <$FILE_COMBINE_SOME_DETAILS_USER_HOOK_AFTER_STRINGFILE_DETAILS_ADDED>

       ;--- Work out some directory details ---------------------------------
       @@UserDestDirNice = ReplaceString(@@UserDestDir, '\', '\<wbr>');
       if   right(@@UserDestDirNice, 1) = ':' then
            @@UserDestDirNice = @@UserDestDirNice || "\";        ;;Make root directories look better

       ;--- Have we seen the key before? ------------------------------------
       @@Key = "@@SHOWN_" || @@DestDirKey
       if  symbol(@@Key) = 'VAR' then
           @@DirPlus = @@UserDestDirNice;    ;;Already shown key once before
       else
       do
           ;--- Not shown yet, prevent redisplay ----------------------------
           call value @@Key, "";

           ;--- The name as supplied by the user ----------------------------
           @@D = '<div class="DirUser" Title="Directory in &quot;user friendly&quot; format">' || @@UserDestDirNice || '</div><$FILE_HTMLRPT_HR>';

           ;--- Show the "mapped user" directory ----------------------------
           @@KeyM = 'DT_KEY2USER_MAPPED_' || c2x(translate(@@DestDirKey));
           if  symbol(@@KeyM) = 'VAR' then
           do
               @@MappedDir     = value(@@KeyM)
               @@MappedDirNice = Wbr(@@MappedDir, '_\');
               if  (@@MappedDir <> @@UserDestDir) & (@@MappedDir <> '[' || @@DestDirKey || ']') then
               do
                   ;--- We are not duplicating any info ---------------------
                   @@D = @@D || '<div class="DirKeyMapped" title="User directory in &quot;mapped&quot; format. This shows the effect of any &quot;MapUserDir&quot; commands on the supplied user friendly directory.">' || @@MappedDirNice || '</div><$FILE_HTMLRPT_HR>';
               end;
           end;

           ;--- Show the User dir + Key info (once) -------------------------
           @@DestDirKeyNice = Wbr(@@DestDirKey, '_\');
           @@D = @@D || '<div class="DirKey" title="Directory as MSI key">' || @@DestDirKeyNice || '</div>';
           @@DirPlus = @@D;
       end;

       ;--- User Hook -------------------------------------------------------
       <$FILE_COMBINE_SOME_DETAILS_USER_HOOK_END>
   #DefineRexx
#endif


#( '<?NewLine>'
   #define? FILE_HTML_NO_ENTRIES
   #if ['<$HTMLRPT_SHOW_EMPTY_REPORTS>' = 'Y']
       <$HTMLRPT_HEADING TEXT="FILES">
       <P><B>
       <CENTER>There are no files.</CENTER>
       </B>
   #endif
#)
#( '<?NewLine>'
   #define? FILE_HTML_REPORT_START
   <CENTER>
   <TABLE COLS="7" <$HTMLRPT_TABLE_LOOK_AND_FEEL>>
   <thead>
   <TR <$HTMLRPT_TITLE_ATTR_FOR_SORTABLE_TABLE>>
       <TH title="File name (without extension)">Name</TH>
       <TH title="File Extension">Ext</TH>
       <TH title="Files source time (the time of the installed file may differ)." SortType="DateStar">Time</TH>
       <TH title="Files size" SortType="NumberComma">Size</TH>
       <TH title="Where is the file installed?&#10;&#10;Can include MSI details (on the first occurance of each destination location)">Destination<BR>Directory</TH>
       <TH title="Where did the file from?">Source</TH>
       <TH title="File comment (may have other info appended).">Comment</TH>
   </TR>
   </thead>
#)
#( '&#10'
    #define @@ExtraToolTip
    Row Key &quot;<??@@RowKey>&quot;
#)
#( '<?NewLine>'
   #define? FILE_HTML_REPORT_ROW
   <?NewLine>
   <TR <$HTMLRPT_TITLE_ATTR_FOR_TABLE_ROW PREFIX='@@' After=^<$@@ExtraToolTip>^>>
       <TD><??@@DestBaseNE></TD>
       <TD><??@@DestExtn></TD>
       <TD><??@@FileTimeS><??@@FileTimeComment></TD>
       <TD><??@@FileSizeCma></TD>
       <TD><??@@DirPlus></TD>
       <TD><??@@FullSrc></TD>
       <TD><??@@CommentCol></TD>
   </TR>
#)
#( '<?NewLine>'
   #define? FILE_HTML_REPORT_END
   </TABLE>
   <$/HTMLRPT_HEADING>          ;;Section contracts to here
   <P><??@@TotalFileSize $$AddComma> bytes in <??@@HtmlItemCnt> file(s).
   </CENTER>
#)


;----------------------------------------------------------------------------
;--- Query info given file key ----------------------------------------------
;----------------------------------------------------------------------------
#define File?       <$@@AnyThing $$$File?:{$RowKey},{$Query}>{$!:RowKey,QUERY}
#define @@AnyThing
#DefineRexx 'REXX_$$$File?'
    ;--- Get the parameters that were used ----------------------------------
    ;call info "TheParameters="TheParameters
    parse var TheParameters @@Rk ',' @@Query
    TheParameters = ""

    ;--- Perform the query --------------------------------------------------
    @@FiPrefix = '_' || c2x(@@Rk) || '_FI_'
    @@FiWant   = @@FiPrefix || @@Query;
    if  symbol(@@FiWant) = 'VAR' then
        TheValue = value(@@FiWant);         ;;Got it
    else
    do
        ;--- We are about to die, lets look closer --------------------------
        @@Memory = "FILEK_" || c2x(translate(@@Rk));
        if  symbol(@@Memory) <> "VAR" then
            call error 'We can''t query "' || @@Query || '" information on file key that doesn''t exist!', 'We have not seen a file with a row key of "' || @@Rk || '".';
        call error 'Query for "' || @@Query || '" file information failed!', 'The file key "' || @@Rk || '" does exist.', 'Either the query type is invalid or you didn''t ask for the info to be saved.';
    end;
#DefineRexx

;----------------------------------------------------------------------------
;--- VB functions -----------------------------------------------------------
;----------------------------------------------------------------------------
#( '<?NewLine>'
   #define FileVbFunctions


   <?NewLine>
   '=========================================================================
   function HasDllRegisterServer(FileName)
   '=========================================================================
       ;--- Initialization --------------------------------------------------
       on error resume next
       dim oTools
       Set oTools = MkObject("MAKEMSI.Tools")

       ;--- Does the thing self register? -----------------------------------
       dim Answer : Answer = oTools.HasDllRegisterServer(FileName)
       if  err.number = 0 then
           ;--- Call did not trap! ------------------------------------------
           if  Answer <> 0 then
               ;--- Self Registration is possible ---------------------------
               HasDllRegisterServer = ""       ;;Indicate that self registration is possible
           else
               ;--- Self registration is not possible but no exceptions detected ---
               HasDllRegisterServer = <$FILE_AUTOMATIC_SELF_REGISTRATION_RECORD_NO_OK_VBEXP>
           end if
       else
           ;--- Could not really determine the answer -----------------------
           dim ED : ED = err.description
           if  ED = "" then
               ;--- MUST be non-blank ---------------------------------------
               #define NO_WITH_REASON <span title='
               ED = "ERROR 0x" & hex(err.number)
           end if

           ;--- Global switch (do we wish to die?) --------------------------
           #if ['I' <> "<$FILE_AUTOMATIC_SELF_REGISTRATION_DETECT_ERROR_ACTION $$UPPER>"]
               ;--- User does not wish to ignore ----------------------------
               dim WeText : WeText = "We could not determine if the file """ & FileName & """ needs self registration or not. The reason being -> " & ED
               #if ['S' = "<$FILE_AUTOMATIC_SELF_REGISTRATION_DETECT_ERROR_ACTION $$UPPER>"]
                   ;--- Just say --------------------------------------------
                   Say("")
                   Say("WARNING: " & WeText)
                   Say("")
               #elseif
                   Error(WeText)
               #endif
           #endif

           ;--- Make response suitable for use in HTML report ---------------
           dim H
           ED = replace(ED, """", "&quot;")
           HasDllRegisterServer = <$FILE_AUTOMATIC_SELF_REGISTRATION_RECORD_NO_ERR_VBEXP ErrDescVar="ED">
       end if
       Set oTools = Nothing
   end function


   <?NewLine>
   '=========================================================================
   sub @@FileVersion(ByVal VersionForUnversionedFile)
   '=========================================================================
       on error resume next
       dim Real : Real = ""
       CurrentFileVersion = oInstaller.FileVersion(CurrentFile)
       if  err.number <> 0 then
           CurrentFileVersion = ""
       end if

       ;--- Update version number for unversioned files ---------------------
       if   CurrentFileVersion = "" then
            CurrentFileVersion = VersionForUnversionedFile
            Real               = "*"
       end if

       ;--- Use in HTML report? ---------------------------------------------
       if  CurrentFileVersion <> "" then
           VbsReturnMacro "FileVersion." & CurrentFileKey, CurrentFileVersion & Real
       end if
   end sub

   <?NewLine>
   '=========================================================================
   function FileLanguage()
   '=========================================================================
       on error resume next
       FileLanguage = ""
       FileLanguage = oInstaller.FileVersion(CurrentFile, true)           ;;",true" means want language and not file version
      ;FileLanguage = oInstaller.FileLanguage(CurrentFile)                ;;2010-12-07: Vogtlaender, Christoph pointed out this doesn't work (method no longer exists?)
       if  FileLanguage = "" or err.number <> 0 then
           ;--- Either no language or failed getting it ---------------------
           FileLanguage = "<$DEFAULT_FILE_LANG_WHEN_GETLANGUAGE_FAILS>"
       end if

       ;--- Use in HTML report? ---------------------------------------------
       if  FileLanguage <> "" then
           VbsReturnMacro "FileLanguage." & CurrentFileKey, FileLanguage
       end if
   end function

   <?NewLine>
   '=========================================================================
   function Get83PlusLongName(DestLongName)
   '
   ' Called for entries being placed into the "File" table. If the 8.3 name
   ' differs from the long name then it is prepended to produce the required
   ' format:
   '       8.3 Name|Long Name
   '
   ' The "DestLongName" parameter has no path but is the "long" (non-8.3)
   ' name of the file.
   '=========================================================================
       ;--- Is the file being renamed? --------------------------------------
       on error resume next
       dim SrcLongName : SrcLongName = oFS.GetFileName(CurrentFile)
       dim File83
       if   DestLongName = SrcLongName then
            ;--- Not being renamed (so just use source's 8.3 name -----------
            dim oFile : set oFile   = oFS.GetFile(CurrentFile)
            VbsCheck "Could not find the file """ & CurrentFile & """"
            #if ['<$FILE_SUPPORT_WINDOWS_HARDLINKS_BUG $$UPPER>' = 'N']
                ;--- We want to aboty can't get "8.3" name ------------------
                File83 = ShortName(oFile, true)
            #elseif
                ;--- We support hardlinks (and Windows bug) -----------------
                File83 = ShortName(oFile, false)    ;;Don't die on 8.3 bug detection!
                if  File83 = "" then
                    ;--- Windows issue with 8.3 names detected... -----------
                    File83 = Need83Name("$FILE$", DestLongName)
                end if
            #endif
       else
            ;--- Use the destination name -----------------------------------
            File83 = Need83Name("$FILE$", DestLongName)
       end if

       ;--- Now set up the return value -------------------------------------
       if  File83 = DestLongName then
           Get83PlusLongName = DestLongName                 ;;Don't need leading 8.3 bit
       else
           Get83PlusLongName = File83 & "|" & DestLongName  ;;Add 8.3 name
       end if

       ;--- Make sure nothing went wrong above ------------------------------
       VbsCheck "Get83PlusLongName() failed for the file """ & CurrentFile & """"
       set oFile = Nothing
   end function

   <?NewLine>
   '=========================================================================
   function FileAttribs(BaseAttribs, CopyTheseAttribs)
   ;
   ; Only from Hidden/System/ReadOnly!
   ; Only called if at least one of the 3 bits is required.
   ; If the attributes are set in the source file then the installed
   ; "destination" file should also have the attribute!
   '=========================================================================
        ;--- We start with the base attributes ------------------------------
        on error resume next
        FileAttribs = BaseAttribs

        ;--- See if use wants to copy specific file attributes over ---------
        if  CopyTheseAttribs <> "" & CopyTheseAttribs <> 0 then
            ;--- Get the information, abort on failure ----------------------
            dim FromFileAttribs : FromFileAttribs = oInstaller.FileAttributes(CurrentFile)
            VbsCheck "Could not get file attributes for """ & CurrentFile & """"

            ;--- Filter out unwanted bits -----------------------------------
            FromFileAttribs = FromFileAttribs and CopyTheseAttribs

            ;--- Combine with the "base" attributes -------------------------
            FileAttribs = FileAttribs or FromFileAttribs
        end if

        ;--- Save this information away -------------------------------------
        if  (FileAttribs and 7) <> 0 then
            ;--- Non-existance of macro implies "0" -------------------------
            VbsReturnMacro "FileHRS." & CurrentFileKey, FileAttribs and 7
        end if
   end function


   <?NewLine>
   '=========================================================================
   sub @@FileHash(AddtoHashTableYn)
   ;
   ; This function adds a file hash (MD5) if it is possible to do so.
   ; Windows Installer 1.x can not do so...
   '=========================================================================
       ;--- Try to get the information --------------------------------------
       on error resume next
       dim oHash : set oHash = FileHash(CurrentFile)
       if  err.number = 0 then
           ;--- Want to see any errors that occur ---------------------------
           on error goto 0

           ;--- User may just want in HTML report ---------------------------
           if   AddtoHashTableYn = "Y" then
               ;--- No its OK to Update the HASH table ----------------------
               if   CurrentFileVersion = "" then
                  ;--- The file is not versioned so OK to add hash to MSI table ---
                   <$Table "MsiFileHash">
                   #(
                       <$Row
                              *File_="CurrentFileKey"
                             Options="0"
                          *HashPart1="oHash.IntegerData(1)"
                          *HashPart2="oHash.IntegerData(2)"
                          *HashPart3="oHash.IntegerData(3)"
                          *HashPart4="oHash.IntegerData(4)"
                       >
                   #)
                   <$/Table>
               end if
           end if

           ;--- Use in HTML report? ---------------------------------------------
           #ifndef FILE_DONT_RETURN_MD5_INFORMATION
               ;--- May wish to turn off if huge MSI? ---------------------------
               VbsReturnMacro "FileHash." & CurrentFileKey, PrettyHash(oHash)
           #endif
           set oHash = Nothing
       end if
   end sub

   <?NewLine>
   '=========================================================================
   function FileHash(ByVal FileName)
   '=========================================================================
       ;--- Get the information, abort on failure ---------------------------
       on error resume next
       set FileHash = oInstaller.FileHash(FileName, 0)

       ;--- The above may have failed, ignore failure if "TRY" requested ----
       #if ['<$DEFAULT_FILE_WANT_FILEHASH>' <> 'T']
           ;--- We don't wish to TRY so we expect it to work! ---------------
           VbsCheck "Could not create a MD5 hash for """ & FileName & """" & VbCRLF & VbCRLF & "Note that Windows Installer 2.0+ is required to calculate MD5 codes."
       #endif
   end function
#)


;----------------------------------------------------------------------------
;--- File Verification ------------------------------------------------------
;----------------------------------------------------------------------------
#RexxVar @@VerifyArraySetupCmdsCnt     = 0
#RexxVar @@VerifyComponent2GuidMapping = ''
#(
    #define FILE_SET_UP_FILE_VERIFICATION
    #{  FOR @@Index = 1 to @@VerifyArraySetupCmdsCnt
        ;--- Output the initialization commands -----------------------------
        <??@@VerifyArraySetupCmds.@@Index><?Flush>
    #}
#)
#define  @@VERIFY_FILES_BUTTON_ID      VerifyFilesButton
#define  @@VERIFY_FILES_BUTTON_TEXT    Verify Files
#( '<?NewLine>'
   #define FILE_SCRIPT_INIT
   dim Files()
   dim FilesCnt   : FilesCnt = 0
#)
#( '<?NewLine>'
   #define FILE_HTML_VERIFICATION_CODE

   ;--- Start VBSCRIPT ------------------------------------------------------
   <?NewLine>
   <script LANGUAGE="VBSCRIPT">
       ;--- Define some VBSCRIPT variables ----------------------------------
       dim T
       dim CachedHtml

       ;--- Set up some constants/variables used to Convert "ProgramFilesFolder" etc ---
       const msiOpenDatabaseModeCreateDirect   = 4
       const msidbFileAttributesReadOnly            = &H000001
       const msidbFileAttributesHidden              = &H000002
       const msidbFileAttributesSystem              = &H000004
       const msiUILevelNone   = 2
       const PID_CODEPAGE     = 1
       const PID_TEMPLATE     = 7
       const PID_PACKAGECODE  = 9
       const PID_MsiSchema    = 14
       const PID_WORDCOUNT    = 15
       const PID_SourceType   = 15
       const TemporaryFolder  = 2
       on error resume next
       dim DirTmpMsiName, oDirSummary, oDirSession, oDirMsi, Session2InstalledProduct

       ;--- Set up the file array -------------------------------------------
       <?NewLine>
       dim UpToIndex
       dim oComp2Guid : set oComp2Guid = Nothing   ;;Dictionary object

       <?NewLine>
       ;===========================================
       sub HtmlFlush()
       ;===========================================
           #define ID_FILEVER IdFileVer
           <$ID_FILEVER>.innerHTML = CachedHtml
           HtmlClear()
       end sub

       <?NewLine>
       ;===========================================
       sub HtmlClear()
       ;===========================================
           CachedHtml = ""
       end sub

       <?NewLine>
       ;===========================================
       sub HtmlOutput(TheHtml)
       ;===========================================
           CachedHtml = CachedHtml & TheHtml
       end sub

       <?NewLine>
       ;===========================================
       function Right0(ByVal Text, ByVal Length)
       ;===========================================
           Right0 = right(string(Length, "0") & Text, Length)
       end function

       <?NewLine>
       ;===========================================
       function ReformatTs(ByVal Ts)
       ;===========================================
       #(
           ReformatTs =
           mid(Ts, 7, 2)
           & "/"
           & mid(Ts, 5, 2)
           & "/"
           & left(Ts, 4)
           & " "
           & mid(Ts, 9, 2)
           & ":"
           & mid(Ts, 11, 2)
           & ":"
           & mid(Ts, 13, 2)
       #)
       end function

       <?NewLine>
       '=========================================================================
       function PrettyFileAttr(FileAttr)
       '=========================================================================
            dim H, R, S
            if  FileAttr and msidbFileAttributesHidden   then H = "<$FILE_VERIFY_ATTRIBUTE_SET.H>" else H = "<$FILE_VERIFY_ATTRIBUTE_RESET.H>"
            if  FileAttr and msidbFileAttributesReadOnly then R = "<$FILE_VERIFY_ATTRIBUTE_SET.R>" else R = "<$FILE_VERIFY_ATTRIBUTE_RESET.R>"
            if  FileAttr and msidbFileAttributesSystem   then S = "<$FILE_VERIFY_ATTRIBUTE_SET.S>" else S = "<$FILE_VERIFY_ATTRIBUTE_RESET.S>"
            PrettyFileAttr = H & R & S
       end function

       <?NewLine>
       ;===========================================
       sub VerifyFile()
       ;===========================================
           ;--- Split up the information ------------------------------------
           dim FI           : FI           = split(Files(UpToIndex), ";")
           dim FileNameOrig : FileNameOrig = FI(0)          ;;As supplied (untouched)
           dim FileNameDef  : FileNameDef  = FileNameOrig   ;;Has any leading "[Key]" replaced if possible
           dim CorrectSize  : CorrectSize  = clng(FI(1))
           dim CorrectTs    : CorrectTs    = FI(2)
           dim CorrectVer   : CorrectVer   = FI(3)
           dim CorrectMd5   : CorrectMd5   = FI(4)
           dim CorrectAttr  : CorrectAttr  = clng(FI(5))
           dim Component    : Component    = FI(6)

           ;--- Get some component information ------------------------------
           on error resume next
           dim ItsGuid       : ItsGuid       = oComp2Guid(Component)

           ;--- Take care of any possible leading MSI key -------------------
           if left(FileNameDef, 1) = "[" then
              dim EndPos
              EndPos = instr(FileNameDef, "]")
              if   EndPos <> 0 then
                   dim DirKey  : DirKey  = mid(FileNameDef, 2, EndPos-2)
                   dim DirLocn : DirLocn = ""
                   DirLocn = oDirSession.Property(DirKey)
                   if   DirLocn <> "" then
                        FileNameDef = DirLocn & mid(FileNameDef, EndPos+2)    ;;prevent "\\"
                   end if
              end if
           end if

           ;--- Hopefully the keypath is a file... --------------------------
           dim ComponentPath : ComponentPath = ""
           dim ComponentDir  : ComponentDir  = ""
           dim KeyPathMsg    : KeyPathMsg    = ""
           if Component <> "" then
              ;--- We do have component information -------------------------
              ComponentPath = oInstaller.ComponentPath(ProductCode, ItsGuid)
              if  ComponentPath = "" then
                   KeyPathMsg = ""
              else
                   ;--- There is a keypath --------------------------------------
                   if  left(ComponentPath, 1) = "0" and mid(ComponentPath, 3, 1) = ":" then
                       ;--- Registry keypath ----------------------------------------
                       KeyPathMsg    = "registry keypath of """ & ComponentPath & """"
                       ComponentDir  = ""
                   else
                       ;--- Could be a folder keypath (not file/registry) -----------
                       if   oFS.FolderExists(ComponentPath) then
                            KeyPathMsg    = "folder"
                            ComponentDir  = ComponentPath
                       else
                            KeyPathMsg    = "file"
                            ComponentDir  = oFS.GetParentFolderName(ComponentPath)
                       end if
                       if  ComponentDir <> "" and right(ComponentDir, 1) <> "\" then
                           ComponentDir = ComponentDir & "\"
                       end if
                       KeyPathMsg = KeyPathMsg & " keypath of """ & ComponentDir & """"
                   end if
              end if
              if   KeyPathMsg <> "" then
                    KeyPathMsg = "Component """ & Component & """ is installed and has a " & KeyPathMsg
              end if
           end if

           ;--- See if we can work out where the file is --------------------
           dim FileEXISTS : FileEXISTS = false
           dim FileName   : FileName   = ""
           dim InstalledFileName
           dim FileTT
           if  ComponentDir <> "" then
               ;--- Component installed and we have location info -----------
               FileName          = ComponentDir & oFS.GetFileName(FileNameDef)
               InstalledFileName = true
               FileTT            = ""
               if  oFS.FileExists(FileName) then
                   FileEXISTS = true
               end if
           else
               ;--- Component not installed (or don't have keypath) ---------
               FileName          = FileNameDef     ;;As originally supplied by MSI creator
               InstalledFileName = false
               FileTT            = "Warning we can only check the file in its default location!"
               if  oFS.FileExists(FileName) then
                   FileEXISTS = true
               end if
           end if
           FileTT = trim(FileTT & " " & KeyPathMsg)

           ;--- Update progress ---------------------------------------------
           dim ProgressText : ProgressText = "Verifying file #" & UpToIndex+1 & "/" & FilesCnt
           window.status                     = ProgressText & ": " & FileName
           <$@@VERIFY_FILES_BUTTON_ID>.Value = "Wait: " & ProgressText

           ;--- Output the start of the file row ----------------------------
           T =     "<tr>"
           T = T & "<td>"
           if  InstalledFileName then
               T = T & "<span title='" & FileTT & "'>"
           else
               T = T & "<span class='FileVerify_FileNameDefault' title='" & FileTT & "'>"
           end if
           T = T & replace(FileName, "\", "\<wbr>")
           if  not InstalledFileName then
               T = T & " *"
           end if
           T = T & "</span>"
           T = T & "</td>"
           T = T & "<td>" & CorrectSize & "</td>"
           T = T & "<td>" & ReformatTs(CorrectTs) & "</td>"
           T = T & "<td>" & PrettyFileAttr(CorrectAttr) & "</td>"

           ;--- Does the file exist? ----------------------------------------
           dim FileOK : FileOK = false
           T = T & "<td>"
           if  not FileEXISTS then
               if   left(FileNameDef, 1) <> "[" then
                    T = T & "<span class='FileVerify_DoesNotExist'>File does not exist!</span>"
               else
                    T = T & "<span class='FileVerify_DoesNotExist'>Can't tell if file exists!</span>"
               end if
           else
               ;--- Get file information ------------------------------------
               dim oFile : set oFile = oFs.GetFile(FileName)
               if  err.number <> 0 then
                   T = T & "<span class='FileVerify_CantAccess'>Could not access the file - " & err.description & "</span>"
               else
                   ;--- Convert the files date/time into a PPWIZARD timestamp ---
                   dim Dt : Dt = oFile.DateLastModified
                   dim Ds : Ds = Right0(Year(Dt), 4) & Right0(Month(Dt),2) & Right0(day(Dt), 2)
                   dim Ts : Ts = Right0(hour(Dt), 2) & Right0(Minute(Dt),2) & Right0(second(Dt), 2)
                   dim FileTime : FileTime  = Ds & Ts

                   ;--- Get the files attributes ----------------------------
                   dim FileAttr : FileAttr = oFile.Attributes and 7  ;;Only want Readonly/Hidden/System attributes

                   ;--- Get MD5 ---------------------------------------------
                   dim oCurrentMd5, CurrentMd5
                   err.clear()
                   set oCurrentMd5 = oInstaller.FileHash(FileName, 0)
                   if  err.number <> 0 then
                       CurrentMd5 = ""
                   else
                       CurrentMd5 = PrettyHash(oCurrentMd5)
                   end if
                   set oCurrentMd5 = Nothing

                   ;--- Get file version ------------------------------------
                   dim CurrentVer
                   CurrentVer = oInstaller.FileVersion(FileName)

                   ;--- Check the date/time ---------------------------------
                   dim TimeOk
                   if  left(FileTime, 8) <> left(CorrectTs, 8) then
                       TimeOk = false
                   else
                       ;--- Dates match, now check time ---------------------
                       dim FileSeconds, RequiredSeconds
                       RequiredSeconds = mid(CorrectTs,9,2)*3600 + mid(CorrectTs,11,2)*60 + mid(CorrectTs,13,2)
                       FileSeconds     = mid(FileTime, 9,2)*3600 + mid(FileTime, 11,2)*60 + mid(FileTime, 13,2)
                       if  abs(RequiredSeconds - FileSeconds) <= 2 then  ;;Within 2 seconds is OK
                           TimeOk = true
                       else
                           TimeOk = false
                       end if
                   end if

                   ;--- Compare MD5 -----------------------------------------
                   dim Md5Ok       : Md5Ok       = true
                   dim Md5Compared : Md5Compared = False
                   if  CorrectMd5 <> "" and CurrentMd5 <> "" then
                       ;--- We have MD5 information for both before/now -----
                       Md5Compared = true
                       if  CorrectMd5 <> CurrentMd5 then
                           Md5Ok = false
                       end if
                   end if

                   ;--- Report ----------------------------------------------
                   if  (oFile.Size = CorrectSize) and (CurrentVer = CorrectVer) and (FileAttr = CorrectAttr) and ((Md5Compared and Md5Ok) or TimeOk) then
                       ;--- Files match (time within 2 seconds) -------------
                       FileOK = true
                       dim OkTT
                       if   Md5Compared then
                            OkTT = "MD5 validated OK (" & CurrentMd5 & ")"
                       else
                            OkTT = "MD5 could not be validated"
                       end if
                       T = T & "<span class='FileVerify_OK' title='" & OkTT & "'>"
                       T = T & "OK"
                       if   Md5Compared then
                            ;--- MD5 compared and OK, don't care much about time ---
                            if  not TimeOk then
                                T = T & "* (MD5's match but time differs, its " & ReformatTs(FileTime) & ")"
                            end if
                       else
                            ;--- MD5's were not compared --------------------
                            T = T & "* (MD5's not compared"
                            if  CurrentMd5 <> "" then
                                ;--- We know current MD5 (don't know original) ---
                                T = T & ", its " & CurrentMd5
                            end if
                            T = T & ")"
                       end if
                       T = T & "</span>"
                   else
                       ;--- Files Mismatch ----------------------------------
                       dim ErrorNumber : ErrorNumber = 0
                       T = T & "<span class='FileVerify_MisMatch'>"
                       if  oFile.Size <> CorrectSize then
                           ;--- Size differs --------------------------------
                           ErrorNumber = ErrorNumber + 1
                           T = T & " File size differs (" & oFile.Size & "). "
                       end if
                       if  CurrentVer <> CorrectVer then
                           ErrorNumber = ErrorNumber + 1
                           T = T & " File version differs (its " & CurrentVer & "). "
                       end if
                       if   FileAttr <> CorrectAttr then
                            ErrorNumber = ErrorNumber + 1
                            T = T & " File attributes differ (its """ & PrettyFileAttr(FileAttr) & """). "
                       end if
                       if  not TimeOk then
                           ErrorNumber = ErrorNumber + 1
                           if  ErrorNumber <> 1 then T = T & "<br>"
                           T = T & " File time differs (its " & ReformatTs(FileTime)
                           T = T & ")."
                       end if

                       ;--- Output some MD5 information ---------------------
                       if  oFile.Size = CorrectSize then
                            ;--- No point saying anything if the file size differs! ---
                            if  not Md5Compared then
                                ;--- Couldn't check MD5 ---------------------
                                T = T & " MD5's not compared"
                                if  CurrentMd5 <> "" then
                                    ;--- We know current MD5 (don't know original) ---
                                    T = T & " (currently " & CurrentMd5 & ")"
                                end if
                                T = T & ". "
                            else
                                ;--- We did compare MD5 codes ---------------
                                if  Md5Ok then
                                    T = T & " File contents identical (MD5 codes match). "
                                else
                                    ErrorNumber = ErrorNumber + 1
                                    T = T & " MD5 hash differs (its " & CurrentMd5 & "). "
                                end if
                            end if
                       end if
                       T = T & "</span>"
                   end if
                   set oFile = Nothing
               end if
           end if

           ;--- Check if component installed --------------------------------
           if   Component <> "" then
               dim Tg, Tgc
               Tgc = ""
               if  not oComp2Guid.exists(Component) then
                   Tg = Tg & "<br>The GUID for component """ & Component & """ is unknown (bug?)"
                   Tgc = "GuidUnknown"
               else
                   ;--- Get the GUID --------------------------------------------
                   ;dim ItsGuid : ItsGuid = oComp2Guid(Component)

                   ;--- Is it installed? ----------------------------------------
                   ComponentHtml = replace(Component,     "_", "_<wbr>")
                   ComponentHtml = replace(ComponentHtml, ".", ".<wbr>")
                   Tg = Tg & "<div title='Component """ & Component & """ has a GUID of """ & ItsGuid & """.'>"
                   Tg = Tg & "Component """ & ComponentHtml & """ "
                   if  ItsGuid = "" then
                       Tg = Tg & "is an unmanaged component (may or may not have been installed)"
                       Tgc = "ComponentUnmanaged"
                   else
                       if  ComponentPath = "" then
                           ;--- The component is NOT installed ------------------
                           Tg = Tg & "is not installed"
                           if  FileOK then
                               Tgc = "ComponentNotInstalledButFileOk"
                           else
                               if  FileEXISTS then
                                   Tgc = "ComponentNotInstalledAndFileDoesntMatch"
                               else
                                   Tgc = "ComponentNotInstalledAndFileDoesntExist"
                               end if
                           end if
                       else
                           ;--- The component IS installed ----------------------
                           Tg = Tg & "is installed"
    ;;;DB$                       Tg = Tg & " (PATH=" & ComponentPath & ")"
                           if  FileOK then
                               #if ['Y' = '<$FILE_VERIFY_SHOW_COMPONENT_OK_MESSAGE_WHEN_FILES_ALSO_OK>']
                                   Tgc = "ComponentInstalledAndFileOk"
                               #elseif
                                   ;--- Don't show the message ------------------
                                   Tgc = ""
                                   Tg  = ""
                               #endif
                           else
                               Tgc = "ComponentInstalledButFileDoesntMatch"
                           end if
                       end if
                   end if
                   if Tg <> "" then Tg = Tg & "</div>"
               end if
               if  Tg <> "" then
                   if  Tgc <> "" then T = T & "<span class='FileVerify_" & Tgc & "'>"
                   T = T & Tg
                   if  Tgc <> "" then T = T & "</span>"
               end if
           end if


           ;--- Finish this column and row ----------------------------------
           T = T & "</td>"
           T = T & "</tr>"
           HtmlOutput(T)

           ;--- Finished? ---------------------------------------------------
           UpToIndex = UpToIndex + 1
           if  UpToIndex <= ubound(Files) then
               ;--- We have not yet finished to do the next file ------------
               window.setTimeout "VerifyFile()", 0
           else
               ;--- Finished! -----------------------------------------------
               EndVerify()
           end if
       end sub

       <?NewLine>
       ;===========================================
       sub StartVerify()
       ;===========================================
           ;--- Start the report --------------------------------------------
           on error resume next
           T = "<p>"
           T = T & "<center>"
           T = T & "<$HTMLRPT_HEADING Text='File Verification Report' VBSTR='Y'>"

           ;--- See if the package is installed -----------------------------
           HtmlOutput(T & GetInstalledState() & "<p>")

           ;--- Set up the Comp 2 Guid dictionary object --------------------
           <?RestartLine>
           set oComp2Guid = CreateObject("Scripting.Dictionary")
           <??@@VerifyComponent2GuidMapping><?RestartLine>

           ;--- Generate the start of the table -----------------------------
           T =     "<table BGCOLOR='<$FILE_VERIFY_OUTPUT_BACKGROUND_COLOR>' COLS='4' <$HTMLRPT_TABLE_LOOK_AND_FEEL>>"
           T = T & "<thead>"
           T = T & "<tr>"
           T = T & "<th>File Name</th>"
           T = T & "<th SortType='NumberComma' title='Correct File Size'>Size<br>in MSI</th>"
           T = T & "<th SortType='Date' title='Correct File date/time'>Date/Time<br>in MSI</th>"
           T = T & "<th SortType='CS'   title='Correct File Attributes (H)idden, (R)eadOnly and (S)ystem (bit set if in upper case).'>MSI<br>Attr</th>"
           T = T & "<th>Status</th>"
           T = T & "</tr>"
           T = T & "</thead>"
           HtmlOutput(T)

           ;--- Mark as busy ------------------------------------------------
           window.status                     = "Verifying files..."
           <$@@VERIFY_FILES_BUTTON_ID>.Value = "Wait..."            ;;Change text
           VerifyFilesButton.disabled        = "wait"               ;;Grey out button
           document.body.style.cursor        = "wait"               ;;Change pointer to hour glass (may not work - but disable will be obvious)

           GetDirectoryOpen()

           ;--- Start verification (1st file) -------------------------------
           window.setTimeout "VerifyFile()", 0
       end sub

       <?NewLine>
       ;===========================================
       sub EndVerify()
       ;===========================================
           ;--- End of HTML table etc ---------------------------------------
           T = "</table>"
           T = T & "</center>"
           T = T & "<p>This verification report is correct as at " & now() & ".<br>"
           T = T & "<b>Only those files listed in the above file report are tested</b> "
           T = T & "(any in merge modules etc are not validated).<br>"
           T = T & "The file size, version, MD5 (contents) as well as date and time are checked.<br>"
           T = T & "<b>There could be good reasons why a file might be missing or mismatch</b> (for example the file might be conditionally installed or an INI file could have been modified by a user or even the install). "
           HtmlOutput(T)
           GetDirectoryClose()

           ;--- No longer busy etc ------------------------------------------
           document.body.style.cursor = "auto"
           window.status              = ""
           <$@@VERIFY_FILES_BUTTON_ID>.Value = "<$@@VERIFY_FILES_BUTTON_TEXT>"
           VerifyFilesButton.disabled        = ""           ;;un-gray button
           HtmlFlush()
       end sub

       <?NewLine>
       ;===========================================
       sub VerifyFiles()
       ;
       ; Creates FSO and starts the verification.
       ;===========================================
           ;--- Clear any existing verification details ---------------------
           on error resume next
           <$ID_FILEVER>.innerHTML = ""
           UpToIndex               = 0
           HtmlClear()

           ;--- Create required objects -------------------------------------
           T = CreateObjects()
           if   T = "" then
                StartVerify()
           else
                ;--- Failed to create ---------------------------------------
                HtmlOutput(T)
                HtmlFlush()
           end if
       end sub

       <?NewLine>
        '============================================================================
        sub GetDirectoryOpen()
        '============================================================================
            ;--- No UI visible! ---------------------------------------------
            on error resume next
            oInstaller.UILevel = msiUILevelNone

            ;--- See if we can set session to existing installed product ----
            DirTmpMsiName   = ""
            set oDirSession = oInstaller.OpenProduct(ProductCode)
            if  err.number = 0 then
                Session2InstalledProduct = true     '.TargetPath("ProgramFilesFolder") etc fails...
            else
                ;--- Not installed product! ---------------------------------
                Session2InstalledProduct = false

                ;--- Open a temporary database ------------------------------
                on error resume next
                DirTmpMsiName = oFS.GetSpecialFolder(TemporaryFolder) & "\" & oFS.GetTempName()
                set oDirMsi   = oInstaller.OpenDatabase(DirTmpMsiName, msiOpenDatabaseModeCreateDirect)

                ;--- No UI visible! -----------------------------------------
                oInstaller.UILevel = msiUILevelNone

                ;--- Put minimal "dummy" properties into the summary --------
                SummaryItem PID_PACKAGECODE, "{1183A239-D374-4AD3-8BF3-3F773026745D}"
                SummaryItem PID_CODEPAGE,    1252
                SummaryItem PID_TEMPLATE,    ";0"
                SummaryItem PID_MsiSchema,    100
                SummaryItem PID_SourceType,    0

                ;--- Open the oDirSession -----------------------------------
                set oDirSession = oInstaller.OpenPackage(oDirMsi)
            end if
        end sub

        <?NewLine>
        '============================================================================
        sub GetDirectoryClose()
        '============================================================================
            '--- Close the session --------------------------------------------------
            on error resume next
            set oDirSession = Nothing

            '--- Close the database -------------------------------------------------
            set oDirMsi = Nothing

            '--- Delete the temporary MSI file --------------------------------------
            oFS.DeleteFile DirTmpMsiName
        end sub

       <?NewLine>
       '=========================================================================
       sub SummaryItem(ByVal SummaryNumber, ByVal SummaryValue)
       '=========================================================================
           ';--- Open the summary ------------------------------------------------
           on error resume next
           SummaryOpen()
           oDirSummary.Property(SummaryNumber) = SummaryValue
           SummaryClose()
       end sub

       <?NewLine>
       '=========================================================================
       sub SummaryOpen()
       '=========================================================================
           ';--- Execute the command ---------------------------------------------
           on error resume next
           set oDirSummary = oDirMsi.SummaryInformation(99)
       end sub


       <?NewLine>
       '=========================================================================
       sub SummaryClose()
       '=========================================================================
           ';--- Execute the command ---------------------------------------------
           on error resume next
           oDirSummary.persist()
           set oDirSummary = Nothing
       end sub

       <?NewLine>
       '=========================================================================
       sub Add2VerifyList(VerDestFile, FileSize, FileTs, FileVer, FileMd5, FileAttr, Component)
       '=========================================================================
            redim preserve files(FilesCnt)
            Files(FilesCnt) = VerDestFile & ";" & FileSize & ";" & FileTs & ";" & FileVer & ";" & FileMd5 & ";" & FileAttr & ";" & Component
            FilesCnt = FilesCnt + 1
       end sub


       ;--- Include MD5 code ------------------------------------------------
       #include "PrettyMd5.VH"

       ;--- Only create button if in IE ---------------------------------
       document.write("<br><center>")
       document.write("<input name='<$@@VERIFY_FILES_BUTTON_ID>' type='button' value='<$@@VERIFY_FILES_BUTTON_TEXT>' onClick='VBSCRIPT:SetUpAnyFilesToBeValidated():VerifyFiles()' TITLE='Verify the installed files (check file size, attributes, MD5 checksum (if possible) and date/time'>")
       document.write("</center>")
   </script>


   ;--- Verification output goes here ---------------------------------------
   <?NewLine>
   <div ID="<$ID_FILEVER>" title="Verify file output. Checked file size, date/time, version, attributes and MD5 hash (where possible).">
   </div>
   <?NewLine>
#)


;----------------------------------------------------------------------------
;--- Initialization ---------------------------------------------------------
;----------------------------------------------------------------------------
#DefineRexx ''
    call GetIdPrepare '@@Feature_';
    @@CpPrefix = ''; @@CpCnt = 0;
    call GetIdPrepare '@@Component_',, '@@CpPrefix';
#DefineRexx



;----------------------------------------------------------------------------
;--- DATE sorting needs to strip the "*" on some date/times -----------------
;----------------------------------------------------------------------------
#(  '<?NewLine>'
    #define HTMLSORT_INITIALIZATION_CODE_AND_OR_MORE_FUNCTIONS

    <?NewLine><?NewLine>
    //===========================================================================
    function RemoveStar(DateStar)
    //===========================================================================
    {
       return( DateStar.replace("<$FILE_HTMLRPT_INSTALLTIME_COMMENT_TEXT>", "") );
    }


    <?NewLine><?NewLine>
    //===========================================================================
    function TS_METHOD_DateStar(nCol, bDescending)
    //===========================================================================
    {
       var c = nCol;
       var d = bDescending;

       function _compare(n1, n2)
       {
           var v;
           var T1 = RemoveStar( getInnerText(n1.cells[c]) );
           var T2 = RemoveStar( getInnerText(n2.cells[c]) );
           var D1 = Date.parse(T1);
           if  (isNaN(D1))
               D1 = Date.parse("01 JAN 1900");
           var D2 = Date.parse(T2);
           if  (isNaN(D2))
               D2 = Date.parse("01 JAN 1900");

           if (D1 < D2)
               v = (d) ? -1 : +1;
           else if (D1  > D2 )
               v = (d) ? +1 : -1;
           else
               v = 0;
           return(v);
       }

       return _compare;
    }
#)


;----------------------------------------------------------------------------
;--- End of "FILE.MMH" ------------------------------------------------------
;----------------------------------------------------------------------------
#NextId UNLOCK "FILE.MMH"


