;----------------------------------------------------------------------------
;
;    MODULE NAME:   TABLEIE.MMH
;
;        $Author:   USER "Dennis"  $
;      $Revision:   1.5  $
;          $Date:   10 Dec 2008 17:33:02  $
;       $Logfile:   C:/DBAREIS/Projects.PVCS/Win32/MakeMsi/TableIE.mmh.pvcs  $
;      COPYRIGHT:   (C)opyright Dennis Bareis, Australia, 2003
;                   All rights reserved.
;
;    DESCRIPTION:   Do not include this header directly, use 'MAKEMSI.MMH'
;                   instead.
;----------------------------------------------------------------------------
#NextId
#NextId LOCK "TableIE.MMH"



;--- Some options -----------------------------------------------------------
#define? DEFAULT_TABLEIE_CreateTables     Y   ;;Will only create if it does not already exist
#define? DEFAULT_TABLEIE_DeleteRows       N   ;;Delete existing rows before adding IDT ones to tables?
#define? DEFAULT_TABLEIE_ShowReading      Y   ;;Show "Reading:" messages for IDT files?
#define? DEFAULT_TABLEIE_EXPORT_DIRECTORY Exported IDT  ;;Generated into VBSCRIPT


;----------------------------------------------------------------------------
;--- TABLE EXPORT (to IDT) --------------------------------------------------
;----------------------------------------------------------------------------
#( ''
   #define TableExportToIdt
   <$UpdateMmLocation>
   {$!KEYWORDS}  ;;Don't Expect any keywords!
   #if ['{$TABLE=^^ $$IsPassed}' = 'Y']
       ;--- 1 table name - does not have to be in "_Tables" table! ----------
       IdtExport1 "{$TABLE}", "{$Dir=^<$DEFAULT_TABLEIE_EXPORT_DIRECTORY>^}"<?NewLine>
   #elseif
       ;--- Use Mask to look in "_Tables" for list --------------------------
       IdtExport "{$TABLES=^^}", "{$Dir=^<$DEFAULT_TABLEIE_EXPORT_DIRECTORY>^}"<?NewLine>
   #endif

   ;--- Validate parameters -------------------------------------------------
   {$!}
#)


;----------------------------------------------------------------------------
;--- IMPORT table via IDT files (generated by ORCA)       -------------------
;--- Note that TABLE DEFINITION via IDT handled elsewhere -------------------
;----------------------------------------------------------------------------
#( ''
   #define TableImportFromIdt
   <$UpdateMmLocation>
   {$!KEYWORDS}  ;;Don't Expect any keywords!

   ;--- Get list of files matching the mask ---------------------------------
   #evaluate ^^ ^call Files4Mask "{$#1}", "@@IdtFile"^
   #if [@@IdtFile.0 = 0]
       #error ^Could not find any .IDT files matching "{$#1}"^
   #endif

   ;--- Output definitions --------------------------------------------------
   #{  FOR @@I = 1 to @@IdtFile.0
       #if ['{$DIRECT="Y"}' = 'Y']
           ;--- Very simple just call VBSCRIPT routine ----------------------
           IdtImport "<??@@IdtFile.@@i>"<?NewLine>
       #elseif
           ;--- Read the IDT and create required VBSCRIPT -------------------
           #evaluate ^^ ^<$Rexx4TableImportFromIdt {$?} IdtFile="<??@@IdtFile.@@i>">^

           ;--- Generate the VBSCRIPT for this file -------------------------
           <??@@Vbs><?RestartLine>
       #endif
   #}
#)
#DefineRexx  'Rexx4TableImportFromIdt'
   ;--- How do we wish to generate the output -------------------------------
   @@ApplyDefinitions = '{$ApplyDefinitions="Y"}';
   if  @@ApplyDefinitions <> 'N' then
   do
       ;--- Macros will be substituted (normal) -----------------------------
       @@MR = '<' || '$';
       @@NL = '';
   end;
   else
   do
       ;--- Generate macro references in output (unusual) -------------------
       @@MR = '<?x3C>' || '$';         ;;Human wants to view/taylor
       @@NL = '<?NewLine>';
   end;

   ;--- Read the first 3 lines ----------------------------------------------
   @@File = '{$IdtFile}';
   if '{$ShowReading=^<$DEFAULT_TABLEIE_ShowReading>^}' <> 'N' then
       call Reading @@File;
   call AddInputFileToDependancyList @@File;
   @@1 = linein(@@File);
   @@2 = linein(@@File);
   @@3 = linein(@@File);

   ;--- Simple validation (must be at least TableName + 1 field!) -----------
   @@Pos3 = pos(d2c(9), @@3);
   if  @@Pos3 = 0 then
   do
       call FileClose(@@File);
       error('Tabs missing in first 3 lines of "' || @@File || '"');
   end;

   ;--- Extract relevant information from the first 3 lines -----------------
   call ArraySplit "@@Names", @@1, d2c(9);
   call ArraySplit "@@3F",    @@3, d2c(9);
   @@TableName = @@3F.1;
   if  datatype(@@TableName, 'W') then
       @@TableName = @@3F.2;             ;;Ignore any leading code page
   @@NameWidth = 0
   do  @@J = 1 to @@Names.0
       if  length(@@Names.@@J) > @@NameWidth then
           @@NameWidth = length(@@Names.@@J);
   end;

   ;--- Reference the table -------------------------------------------------
   if  @@ApplyDefinitions = 'N' then
   do
       ;--- Human will look at it! ------------------------------------------
       @@Ind1 = '   ';
       @@Ind2 = @@Ind1 || @@Ind1
       @@Ind3 = @@Ind2 || @@Ind1
   end;
   else
   do
       ;--- No one sees it! Needs to be at least 1 space --------------------
       @@Ind1 = '';
       @@Ind2 = '';
       @@Ind3 = ' '     ;;Must be a space to separate $row parameters
   end;
   @@D = ''
   @@D = @@D || @@MR || 'Table "' || @@TableName || '">' || @@NL;
   if '{$CreateTables=^<$DEFAULT_TABLEIE_CreateTables>^}' = 'Y' then
   do
       ;--- Create table if it does not already exist -----------------------
       @@D = @@D || @@Ind1 || 'if not TableExists("' || @@TableName || '") then<?NewLine>'
       @@D = @@D || @@Ind2 || @@MR || 'TableCreate DropExisting=^N^><?NewLine>';
       @@D = @@D || @@Ind1 || 'end if<?NewLine>';
   end;
   if '{$DeleteRows=^<$DEFAULT_TABLEIE_DeleteRows>^}' = 'Y' then
       @@D = @@D || @@Ind1 || @@MR || 'RowsDeleteAll>' || @@NL;

   ;--- Create the definition for this IDT ----------------------------------
   do  while lines(@@File) <> 0
       ;--- Read the next data line -----------------------------------------
       @@Line = linein(@@File);
       call ArraySplit "@@Values", @@Line, d2c(9), 'K', 'Y';
       if  @@ApplyDefinitions = 'N' then
           @@D = @@D || @@Ind1 || '#(' || @@NL;
       @@D = @@D || @@Ind2 || @@MR || 'Row' || @@NL;
       do  @@v = 1 to @@Values.0
           @@D = @@D || @@Ind3 || right(@@Names.@@v, @@NameWidth) || '=' || Quoted(@@Values.@@v) || @@NL;
       end
       @@D = @@D || @@Ind2 || '>' || @@NL;
       if  @@ApplyDefinitions = 'N' then
           @@D = @@D || @@Ind1 || '#)' || @@NL || @@NL;
   end;
   call FileClose(@@File);

   ;--- End of the table ----------------------------------------------------
   @@D = @@D || @@MR || '/Table>' || @@NL || @@NL;
   @@Vbs = @@D;
#DefineRexx


;----------------------------------------------------------------------------
;--- VBS --------------------------------------------------------------------
;----------------------------------------------------------------------------
#( '<?NewLine>'
   #define TableIeVbFunctions

   <?NewLine>
   '=========================================================================
   sub IdtExport1(ByVal TableName, ByVal Path)  ;;Export specific table (does NOT have to be in "_Tables")
   '=========================================================================
       ;--- Make sure the path exists! --------------------------------------
       on error resume next
       if  Path = "" then Path = "<$DEFAULT_MSI_TABLE_EXPORT_DIRECTORY>"
       CreateDir(Path)

       ;--- Now get the full folder path (export will fail otherwise)! ------
       dim FullPath
       FullPath = oFS.GetAbsolutePathName(Path)

       ;--- Export the table ------------------------------------------------
       say "EXPORTING: " & TableName
       err.clear()
       oMSI.Export TableName, FullPath, TableName & ".IDT"
       VbsCheck "Exporting MSI table """ & TableName & """"
   end sub


   <?NewLine>
   '=========================================================================
   function CreateRE(ByRef Filter)    ;;Use oRE.test(string) to compare
   '=========================================================================
       ;--- Create regular expression object --------------------------------
       on error resume next
       set CreateRE = new RegExp
       if err.number <> 0 then
          error("Could not create a regular expression (""new RegExp""), windows clagged?" & vbCRLF & "The ""VBSCRIPT.DLL"" file probably needs registering... " & vbCRLF & "Reason: " & err.description)
       end if

       ;--- Set Pattern being looked for (force whole string match) ---------
       Filter = "^" & Filter & "$"
       CreateRE.Pattern = Filter
       if err.number <> 0 then
          error("Could not set regular expression pattern """ & Filter & """ (probably invalid syntax). Reason: " & err.description)
       end if

       ;--- Care about case? ------------------------------------------------
       CreateRE.IgnoreCase = false
       if err.number <> 0 then
          error("Could not set regular expression to ignore case. Reason: " & err.description)
       end if
   end function


   <?NewLine>
   '=========================================================================
   function TestRe(ByRef oRE, String2Test)      'Performs safe "oRE.test()"
   '=========================================================================
        on error resume next
        TestRe = false                          'Not really required unless I stuff up...
        TestRe = oRE.test(String2Test)          'This can fail (thanks MS, it knew this is "CreateRe"....)
        if err.number <> 0 then
           error("Could not test the regular expression pattern """ & oRE.pattern & """ (its syntax is probably invalid). Reason: " & err.description)
        end if
   end function



   <?NewLine>
   '=========================================================================
   sub IdtExport(ByVal TableMask, ByVal Path)   ;;Export multiple tables (They MUST be listed in "_Tables")
   '=========================================================================
       ;--- Create regular expression object --------------------------------
       on error resume next
       dim oRE
       if  TableMask = "" then TableMask = ".*"
       say "EXPORTING TABLES MATCHING: " & TableMask
       set oRE = CreateRE(TableMask)

       ;--- Open list of all "normal" tables --------------------------------
       dim oRecord
       SqlOpenExec("SELECT `Name` FROM `_Tables`")

       ;--- Process all tables ----------------------------------------------
       dim TableCnt : TableCnt = 0
       dim TableName
       do
           ;--- Get record, exit loop at end --------------------------------
           set oRecord = SqlViewFetch()
           if  oRecord is Nothing then exit do

           ;--- Want this table? --------------------------------------------
           TableName = oRecord.StringData(1)
           if  TestRe(oRE, TableName) then
               ;--- Export the table --------------------------------------------
               TableCnt  = TableCnt + 1
               IdtExport1 TableName, Path
           end if
       loop
       if  TableCnt = 0 then
           Error("No tables exported for regular expression """ & TableMask & """")
       end if
       say "EXPORTED " & TableCnt & " table(s) matching: " &  TableMask

       ;--- Close the list --------------------------------------------------
       SqlViewClose()
       set oRE = Nothing
   end sub


   <?NewLine>
   '=========================================================================
   sub IdtImport(ByVal FileName)
   '=========================================================================
       ;--- Make sure the IDT file exists! ----------------------------------
       on error resume next
       if  not oFS.FileExists(FileName) then
           Error("The IDT file """ & FileName & """ does not exist!")
       end if

       ;--- Get full path  name and filename --------------------------------
       dim FullFileName, Path, BaseName
       FullFileName = oFS.GetAbsolutePathName(FileName)
       Path         = oFS.GetParentFolderName(FullFileName)
       BaseName     = oFS.GetFileName(FullFileName)
       say "IMPORTING: " & BaseName

       ;--- Now import the file ---------------------------------------------
       oMSI.Import Path, BaseName
       VbsCheck "Importing the IDT file """ & Path & "\" & BaseName & """"
   end sub
#)


#NextId UNLOCK "TableIE.MMH"

