<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AutodetectLanguage" xml:space="preserve">
    <value>自动检测</value>
  </data>
  <data name="KeyLMenu" xml:space="preserve">
    <value>左 Alt 键</value>
  </data>
  <data name="KeyRMenu" xml:space="preserve">
    <value>右 Alt 键</value>
  </data>
  <data name="KeyLControl" xml:space="preserve">
    <value>左 Ctrl 键</value>
  </data>
  <data name="KeyRControl" xml:space="preserve">
    <value>右 Ctrl 键</value>
  </data>
  <data name="KeyLWin" xml:space="preserve">
    <value>左 Windows 键</value>
  </data>
  <data name="KeyRWin" xml:space="preserve">
    <value>右 Windows 键</value>
  </data>
  <data name="KeyCapital" xml:space="preserve">
    <value>Caps Lock 键</value>
  </data>
  <data name="KeyNumLock" xml:space="preserve">
    <value>Num Lock 键</value>
  </data>
  <data name="KeyPause" xml:space="preserve">
    <value>Pause 键</value>
  </data>
  <data name="KeyApps" xml:space="preserve">
    <value>菜单键</value>
  </data>
  <data name="KeyEscape" xml:space="preserve">
    <value>ESC 键</value>
  </data>
  <data name="KeyConvert" xml:space="preserve">
    <value>日语键盘变换键</value>
  </data>
  <data name="KeyNonConvert" xml:space="preserve">
    <value>日语键盘无变换键</value>
  </data>
  <data name="KeyScroll" xml:space="preserve">
    <value>Scroll Lock 键</value>
  </data>
  <data name="KeySpace" xml:space="preserve">
    <value>空格键</value>
  </data>
  <data name="KeyReturn" xml:space="preserve">
    <value>回车键</value>
  </data>
  <data name="Composing" xml:space="preserve">
    <value>组合键设置</value>
  </data>
  <data name="UseXorgRules" xml:space="preserve">
    <value>使用来自 Xorg 项目的组合键序列</value>
  </data>
  <data name="UseXorgRulesToolTip" xml:space="preserve">
    <value>使用来自 Xorg 项目 (http://www.x.org/) 的三千多个组合键序列。这些组合键序列常见于标准的 Linux 系统中。</value>
  </data>
  <data name="UseXComposeRules" xml:space="preserve">
    <value>使用来自 XCompose 项目的组合键序列</value>
  </data>
  <data name="UseXComposeRulesToolTip" xml:space="preserve">
    <value>使用来自开源项目 XCompose (https://github.com/kragen/xcompose) 中的一千多个组合键序列。这些序列可能会与 Xorg 中的序列冲突。</value>
  </data>
  <data name="UseEmojiRules" xml:space="preserve">
    <value>使用 WinCompose 的表情符号序列</value>
  </data>
  <data name="UseEmojiRulesToolTip" xml:space="preserve">
    <value>使用来自 WinCompose 的作者以及社区贡献者的表情符号序列。</value>
  </data>
  <data name="DebugWindow" xml:space="preserve">
    <value>Debug 窗口</value>
  </data>
  <data name="ShowSequences" xml:space="preserve">
    <value>显示组合键序列…</value>
  </data>
  <data name="Disable" xml:space="preserve">
    <value>停用 WinCompose</value>
  </data>
  <data name="Restart" xml:space="preserve">
    <value>重新启动</value>
  </data>
  <data name="DonationPage" xml:space="preserve">
    <value>捐款页面</value>
  </data>
  <data name="VisitWebsite" xml:space="preserve">
    <value>访问官网</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>退出</value>
  </data>
  <data name="UnicodeCharacters" xml:space="preserve">
    <value>Unicode 字符</value>
  </data>
  <data name="Sequences" xml:space="preserve">
    <value>组合键序列</value>
  </data>
  <data name="SwapOnInvalid" xml:space="preserve">
    <value>自动尝试将两个按键交换</value>
  </data>
  <data name="SwapOnInvalidToolTip" xml:space="preserve">
    <value>在输入两个按键的序列时，自动尝试交换这两个按键。例如，如果“组合键 E A”不是有效的序列，则自动尝试“组合键 A E”。</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>搜索过滤器：</value>
  </data>
  <data name="ComposeKey" xml:space="preserve">
    <value>组合键：</value>
  </data>
  <data name="ComposeKeyToolTip" xml:space="preserve">
    <value>选择要作为“组合键”的按键。</value>
  </data>
  <data name="UnicodeInput" xml:space="preserve">
    <value>高级 Unicode 输入</value>
  </data>
  <data name="UnicodeInputToolTip" xml:space="preserve">
    <value>启用所有字符的 Unicode 输入，即使它们未在组合键序列表中定义。比如：“组合键 U 1 A 3 F 回车键”这个序列会输出 Unicode 字符 U+1A3F</value>
  </data>
  <data name="InvalidSequences" xml:space="preserve">
    <value>当输入的序列无效时</value>
  </data>
  <data name="CaseInsensitive" xml:space="preserve">
    <value>尝试忽略按键的大小写的匹配</value>
  </data>
  <data name="CaseInsensitiveToolTip" xml:space="preserve">
    <value>如果输入的序列没有组合键序列的定义，但是存在一个仅有大小写区别的定义，则自动使用这个序列。</value>
  </data>
  <data name="DiscardOnInvalid" xml:space="preserve">
    <value>舍弃所有已经输入的字符</value>
  </data>
  <data name="DiscardOnInvalidToolTip" xml:space="preserve">
    <value>如果输入的序列没有组合键序列的定义，丢弃所有已经输入的字符。默认的行为是像没有使用组合键一样，直接输出所有已经输入的字符。</value>
  </data>
  <data name="BeepOnInvalid" xml:space="preserve">
    <value>发出一声哔响</value>
  </data>
  <data name="BeepOnInvalidToolTip" xml:space="preserve">
    <value>如果输入的序列没有组合键序列的定义，则发出系统的哔响。</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>界面语言：</value>
  </data>
  <data name="LanguageToolTip" xml:space="preserve">
    <value>选择 WinCompose 的用户界面语言。默认为操作系统当前语言。</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>关闭</value>
  </data>
  <data name="CopyToClipboard" xml:space="preserve">
    <value>复制到剪贴板</value>
  </data>
  <data name="Emoji" xml:space="preserve">
    <value>表情符号</value>
  </data>
  <data name="Apply" xml:space="preserve">
    <value>应用</value>
  </data>
  <data name="KeepOriginalKey" xml:space="preserve">
    <value>保留组合键原始功能</value>
  </data>
  <data name="KeepOriginalKeyToolTip" xml:space="preserve">
    <value>这个选项要求 WinCompose 最大程度保证用作“组合键”的按键的原始功能。例如：即使指定 Alt 键为组合键，“Alt+Tab”的功能仍然可用。</value>
  </data>
  <data name="InsertZwsp" xml:space="preserve">
    <value>在 Office 应用中插入零宽度空格</value>
  </data>
  <data name="InsertZwspToolTip" xml:space="preserve">
    <value>微软 Office 应用程序有时会在输入特定的 Unicode 字符后，动态地更改文档字体。这个选项在输入 Unicode 字符后，插入一个不可见的空格，以避免这种问题出现。</value>
  </data>
  <data name="EmulateCapsLock" xml:space="preserve">
    <value>用两个 Shift 键模拟 Caps Lock 键</value>
  </data>
  <data name="EmulateCapsLockToolTip" xml:space="preserve">
    <value>如果将大写锁定键 (Caps Lock 键) 设置为“组合键”，其原有功能将不可用。这个选项允许同时按下左右两个 Shift 键来打开大写锁定功能。</value>
  </data>
  <data name="ShiftDisablesCapsLock" xml:space="preserve">
    <value>使用 Shift 键停用大写锁定功能</value>
  </data>
  <data name="ShiftDisablesCapsLockToolTip" xml:space="preserve">
    <value>如果大写锁定键 (Caps Lock 键) 被设置为“组合键”，其原有功能将不可用。这个选项允许按下 Shift 键来关闭大写锁定功能。</value>
  </data>
  <data name="CapsLockCapitalizes" xml:space="preserve">
    <value>大写锁定状态始终锁定为大写字母</value>
  </data>
  <data name="CapsLockCapitalizesToolTip" xml:space="preserve">
    <value>如果启用大写锁定功能，输入比如“é”这样的重音字母时，会输出对应的大写字母比如“É”。</value>
  </data>
  <data name="Categories" xml:space="preserve">
    <value>分类</value>
  </data>
  <data name="InSelectedCategories" xml:space="preserve">
    <value>在所选类别中</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>选项 — WinCompose</value>
  </data>
  <data name="ShowOptions" xml:space="preserve">
    <value>选项…</value>
  </data>
  <data name="TrayToolTip" xml:space="preserve">
    <value>WinCompose v{2} 组合键：{0} ({1} 个组合键序列)</value>
  </data>
  <data name="General" xml:space="preserve">
    <value>常规选项</value>
  </data>
  <data name="Behavior" xml:space="preserve">
    <value>特性</value>
  </data>
  <data name="WindowTitle" xml:space="preserve">
    <value>组合键序列 — WinCompose</value>
  </data>
  <data name="UserMacros" xml:space="preserve">
    <value>用户自定义的宏</value>
  </data>
  <data name="DisabledToolTip" xml:space="preserve">
    <value>WinCompose 已停用</value>
  </data>
  <data name="KeyInsert" xml:space="preserve">
    <value>插入</value>
  </data>
  <data name="TestTyping" xml:space="preserve">
    <value>输入测试</value>
  </data>
  <data name="Tweaks" xml:space="preserve">
    <value>优化</value>
  </data>
  <data name="DelaySeconds" xml:space="preserve">
    <value>{0} 秒</value>
  </data>
  <data name="About" xml:space="preserve">
    <value>关于</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>下载 WinCompose {0}</value>
  </data>
  <data name="AboutBoxTitle" xml:space="preserve">
    <value>关于 — WinCompose</value>
  </data>
  <data name="Programming" xml:space="preserve">
    <value>程序设计</value>
  </data>
  <data name="Translators" xml:space="preserve">
    <value>翻译人员</value>
  </data>
  <data name="License" xml:space="preserve">
    <value>证书</value>
  </data>
  <data name="NeedRestart" xml:space="preserve">
    <value>WinCompose 需要重新启动，才能使部分设置生效。</value>
  </data>
  <data name="ReportBug" xml:space="preserve">
    <value>报告程序错误</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>帮助</value>
  </data>
  <data name="UpdatesToolTip" xml:space="preserve">
    <value>有新版本可用。</value>
  </data>
  <data name="UserDefinedSequences" xml:space="preserve">
    <value>用户自定义的序列</value>
  </data>
  <data name="UserDefinedSequencesEdit" xml:space="preserve">
    <value>编辑</value>
  </data>
  <data name="UserDefinedSequencesReload" xml:space="preserve">
    <value>重新加载</value>
  </data>
  <data name="AllowInjected" xml:space="preserve">
    <value>允许注入的按键</value>
  </data>
  <data name="AllowInjectedToolTip" xml:space="preserve">
    <value>这个选项允许 WinCompose 接受比如 AutoHotKey 或者 Synergy 这类程序发送的按键</value>
  </data>
  <data name="KeyPrint" xml:space="preserve">
    <value>截图键 (Print Screen 键)</value>
  </data>
  <data name="KeyDisabled" xml:space="preserve">
    <value>停用</value>
  </data>
  <data name="CheckUpdates" xml:space="preserve">
    <value>自动检查更新</value>
  </data>
  <data name="CheckUpdatesToolTip" xml:space="preserve">
    <value>如果勾选这个选项，WinCompose 将定期连接互联网来检查新版本。新版本不会自动安装。</value>
  </data>
  <data name="KeepIconVisible" xml:space="preserve">
    <value>尝试保持在系统通知栏可见</value>
  </data>
  <data name="KeepIconVisibleToolTip" xml:space="preserve">
    <value>一般情况下，Windows 会在一段时间后隐藏通知区（系统托盘区）的图标。这个选项会尝试让 WinCompose 的图标一直可见。</value>
  </data>
  <data name="ChangeComposeKey" xml:space="preserve">
    <value>更改…</value>
  </data>
  <data name="CaptureComposeKey" xml:space="preserve">
    <value>请按下要指定为“组合键”的按键。</value>
  </data>
  <data name="AddToFavorites" xml:space="preserve">
    <value>加入喜爱列表</value>
  </data>
  <data name="DisableIcon" xml:space="preserve">
    <value>禁用通知区图标</value>
  </data>
  <data name="DisableIconToolTip" xml:space="preserve">
    <value>如果勾选这个选项，WinCompose 将不会在通知区（系统托盘区）显示图标。将只能通过开始菜单的“WinCompose 设置”和“WinCompose 组合键序列”来打开 WinCompose 的界面。</value>
  </data>
  <data name="KeyHome" xml:space="preserve">
    <value>Home 键</value>
  </data>
  <data name="KeyEnd" xml:space="preserve">
    <value>End 键</value>
  </data>
  <data name="KeyTab" xml:space="preserve">
    <value>Tab 键</value>
  </data>
  <data name="SpecialThanks" xml:space="preserve">
    <value>特别鸣谢</value>
  </data>
</root>
